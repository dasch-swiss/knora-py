{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dsp-tools dsp-tools is a python package containing a command line tool for data model (ontology) creation and manipulation based on JSON input file Python3 modules that implement CRUD (Create, Read, Update, Delete) operations for projects, users, groups and ontologies The package consists of: dsplib Python modules for accessing Knora using the API (ontology creation, data import/export etc.) dsp-tools A command line program to perfrom several operations on a DSP server: create an ontology out of a simple JSON description dump an existing ontology from a DSP server to a JSON file Bulk-upload of data from a XML data file Install To install the latest version published on PyPI run: $ pip3 install dsp-tools To update to the latest version run: $ pip3 install --upgrade dsp-tools To install from source, i.e. this repository run: $ python3 setup.py install Requirements To install the requirements: $ pip3 install -r requirements.txt To generate a \"requirements\" file (usually requirements.txt), that you commit with your project, do: $ pip3 freeze > requirements.txt Publishing Generate distribution package. Make sure you have the latest versions of setuptools and wheel installed: $ python3 -m pip install --upgrade pip setuptools wheel $ python3 setup.py sdist bdist_wheel You can install the package locally from the dist: $ python3 -m pip ./dist/some_name.whl Upload package with twine , first create ~/.pypirc : [distutils] index-servers=pypi [pypi] repository = https://upload.pypi.org/legacy/ username =your_username_on_pypi then upload: $ python3 -m pip install --upgrade tqdm twine $ python3 -m twine upload dist/* For local development: $ python3 setup.py develop Testing $ pip3 install pytest $ pip3 install --editable . $ pytest Requirements To install the requirements: $ pip3 install -r requirements.txt To generate a \"requirements\" file (usually requirements.txt), that you commit with your project, do: $ pip3 freeze > requirements.txt","title":"Introduction"},{"location":"#dsp-tools","text":"dsp-tools is a python package containing a command line tool for data model (ontology) creation and manipulation based on JSON input file Python3 modules that implement CRUD (Create, Read, Update, Delete) operations for projects, users, groups and ontologies The package consists of: dsplib Python modules for accessing Knora using the API (ontology creation, data import/export etc.) dsp-tools A command line program to perfrom several operations on a DSP server: create an ontology out of a simple JSON description dump an existing ontology from a DSP server to a JSON file Bulk-upload of data from a XML data file","title":"dsp-tools"},{"location":"#install","text":"To install the latest version published on PyPI run: $ pip3 install dsp-tools To update to the latest version run: $ pip3 install --upgrade dsp-tools To install from source, i.e. this repository run: $ python3 setup.py install","title":"Install"},{"location":"#requirements","text":"To install the requirements: $ pip3 install -r requirements.txt To generate a \"requirements\" file (usually requirements.txt), that you commit with your project, do: $ pip3 freeze > requirements.txt","title":"Requirements"},{"location":"#publishing","text":"Generate distribution package. Make sure you have the latest versions of setuptools and wheel installed: $ python3 -m pip install --upgrade pip setuptools wheel $ python3 setup.py sdist bdist_wheel You can install the package locally from the dist: $ python3 -m pip ./dist/some_name.whl Upload package with twine , first create ~/.pypirc : [distutils] index-servers=pypi [pypi] repository = https://upload.pypi.org/legacy/ username =your_username_on_pypi then upload: $ python3 -m pip install --upgrade tqdm twine $ python3 -m twine upload dist/* For local development: $ python3 setup.py develop","title":"Publishing"},{"location":"#testing","text":"$ pip3 install pytest $ pip3 install --editable . $ pytest","title":"Testing"},{"location":"#requirements_1","text":"To install the requirements: $ pip3 install -r requirements.txt To generate a \"requirements\" file (usually requirements.txt), that you commit with your project, do: $ pip3 freeze > requirements.txt","title":"Requirements"},{"location":"dsp-tools-create/","text":"JSON ontology definition format Introduction This document contains all the information you need to create an ontology that's used by DSP. In the first section you find a rough overview of the ontology definition, all the necessary components with a definition and a short example of the definition. A short overview In the following section, you find all the mentioned parts with a detailed explanation. Right at the beginning we look at the basic fields that belong to an ontology definition. This serves as an overview for you to which you can return at any time while you read the description. A complete ontology definition looks like this: { \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" }, \"project\": { \"shortcode\": \"0123\", \"shortname\": \"BiZ\", \"longname\": \"Bildung in Zahlen\", \"descriptions\": {}, \"keywords\": [], \"lists\": [], \"groups\": [], \"users\": [], \"ontologies\": [] } } As you can see, only two umbrella terms define our ontology: the \"prefixes\" object and the \"project\" object. In the following we take a deeper look into both of them since, as you can see in the example above, both objects have further fine grained definition levels. \"Prefixes\" object \"prefixes\": { \"prefix\": <iri>\", ...} The \"prefixes\" object contains - as you may already have guessed by the name - the prefixes of external ontologies that are also used in the current project. All prefixes are composed of a keyword, followed by its iri. This is used as a shortcut for later so that you don't always have to specify the full qualified iri but can use the much shorter keyword instead. That means that e.g. instead of addressing a property called \"familyname\" via http://xmlns.com/foaf/0.1/familyName you can simply use foaf:familyName. As you can see in the example below, you can have more then one prefix too. In the example we have \"foaf\" as well as \"dcterms\" as our prefixes. { \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" } } \"Project\" object \"project\": {\"key\": <value>\", ...} Right after the \"prefix\" object the \"project\" object has to follow, which contains all resources and properties of the ontology. The \"project\" object is the bread and butter of the ontology. All its important properties are specified therein. As you saw in the complete ontology definition in the beginning, the project definitions requires exactly all of the following datafields: shortcode shortname longname keywords ontologies Whereas the following fields are optional (if one or more of these fields are not used, it must be omitted): descriptions lists groups users So a simple example definition of the \"project\" object could look like this: \"project\": { \"shortcode\": \"0809\", \"shortname\": \"test\" , \"longname\": \"Test Example\", \"descriptions\": { \"en\": \"This is a simple example project\", \"de\": \"Dies ist ein einfaches Beispielprojekt\" } \"keywords\": [\"example\", \"simple\"], \"lists\": [\u2026], \"groups\": [\u2026], \"users\": [\u2026], \"ontology\": [\u2026] } Simple key/value pairs At that point we will go through all of this step by step and take a more in depth view on the individual fields of the \"project\" object. The first four fields of the \"project\" object are \"key\"/\"value\" pairs. Therefore they are quite simple. Shortcode \"shortcode\": \"<4-hex-characters> It's a hexadecimal string in the range between \"0000\" and \"FFFF\" that's used to uniquely identifying the project. The shortcode has to be provided by the DaSCH. Shortname \"shortname\": \"<string>\" This is a short name (string) for the project. It's ment to be like a nickname. If the name of the project is e.g. \"Albus Percival Wulfric Dumbledore\", then the shortname for it could be \"Albi\". It should be in the form of a xsd:NCNAME , that is a name without blanks and special characters like \":\", \";\", \"&\", \"%\" etc., but \"-\" and \"_\" are allowed Longname \"longname\": \"<string>\" A longer string that provides the full name of the project. In our example, the longname would be \"Albus Percival Wulfric Dumbledore\". Descriptions \"descriptions\": {\"<lang>\": \"<string>\", ...} The descriptions specify the content of the project in exactly one or more strings. These descriptions can be supplied in several languages (currently \"en\" , \"de\" , \"fr\" and \"it\" are supported). The descriptions have to be given as a JSON object with the language as \"key\" and the description as \"value\". See the example above inside the curly brackets after \"descriptions\" to see what that means. Key/object pairs The following fields are not simple \"key\"/\"value\" pairs. They do have a key, the value however is another object and therefore has an internal structure. Due to the increased complexity of these objects, they are looked at in more detail. Keywords \"keywords\": [\"<string>\", \"<string>\", ...] An array of keywords is used to roughly describe the project in single words. A project that deals e.g. with old monastery manuscripts could possess the keywords \"monastery\", \"manuscripts\", \"medieval\", (...). The array can be empty as well e.i. \"keywords\": []. Lists \"lists\": [<list-definition>,<list-definition>,...] Often in order to characterize or classify a real world object, we use a sequential or hierarchical list of terms. For example a hypothetical classification of classical music genres could be as : Orchestral music Symphony Symphony poem Overture Concerto Ballet Incidential music Suite Chamber music String trio Piano trio String quartet Piano quartet String quintet Piano quintet Other Solo instrumental Organ Piano Harpsichord Spinet Guitar Lute Violin Flute Other Vocal Music Choir Oratorios Passions Cantatas Masses Motets Madrigals Psalms Solo Songs Arias Opera Comic opera Serious Opera Opera Semiseria Opera Conrnique Grand opera Opera verismo DSP allows to define such controlled vocabularies or thesauri. They can be arranged \"flat\" or in \"hierarchies\" (as the given example about music genres is). The definition of these entities are called \"lists\" in the DSP. Thus, the list object is used to give the resources of the ontology a taxonomic quality. A taxonomy makes it possible to categorize a resource. The big advantage of a taxonomic structure as it is implemented by the DSP is that the user can subcategorize the objects. This allows the user to formulate his search requests more or less specifically as desired. Thus, in the example above a search for \"Vocal music\" would result in all works that ate characterized by a subelement of \"Vocal music\". However a search for \"Masses\" would retrun only works that have been characterized as such. The number of hierarchy levels is not limited, but for practical reasons should not exceed 3-4 levels Thus, a taxonomy is a hierarchical list of categories in a tree-like structure. The taxonomy must be complete. This means that the entire set of resources must be mappable to the sub-categorization of the taxonomy. To come back to the previous example: It must not occur that an musical work within our resource set cannot be mapped to a subcategory of our taxonomy about classical music. The taxonomic-hierarchical structure is mapped using JSON. This is because JSON inherently implements a tree structure as well. The root of the taxonomy tree is always the name of the taxonomy. The root always stands alone at the top of the tree. It is followed by any number of levels, on which any number of subcategories can be placed. Suppose you want to build a taxonomy of the classical musical genres as above. The root level would be the name of the taxonomy e.g. \"classicalmusicgenres\". The next level on the hierarchy would be the basic genres, in our example \"Orchestral music\", \"Chamber music\", \"Solo instrumental\", \"Vocal Music\" and \"Opera\". Each if these categories may have subcategories. In our example \"Opera\" would have the subcategories \"Comic opera\", \"Serious Opera\", \"Opera Semiseria\", \"Opera Cornique\", \"Grand opera\" and \"Opera verismo\". Each of these could again have subcategories, and so forth. It is important to note that a flat taxonomy is also allowed. This means that a taxonomy from exactly two levels is allowed. We have a root level, with the name of the taxonomy, followed by a single level. Within this second level, any number of categories can coexist equally, but since they are on the same level, they are not hierarchically dependent on each other. For example, you could define a taxonomy \"soccer clubs\", which have the categories \"FCB\", \"FCZ\", (...) in the second level. FC Basel has no hierarchical connection to FC Z\u00fcrich. Their taxonomic structure is therefore flat. A resource can be assigned to a taxonomic node within its properties. So a resource of type \"musical work\" with the title \"La Traviata\" would have the property/attribute \"musical-genre\" with the value \"Grand opera\". Within the DSP, each property or attribute has an assigned cardinality. Sometimes, a taxonomy allows that an object may belong to different categories at the same time (e.g. an image which depicts several categories at the same time). In these cases, a cardinality > 1 allows to add multiple attributes of the same time. See further below the description of the cardinalities A node of the Taxonomy may have the following elements: name : Name of the node. This should be unique for the given list. The name-element is optional but highly recommended]. labels : Language dependent labels in the form { \"<lang>\": \"<label>, ... } . The labels-element is mandatory . It needs to specify at least one language. comments : Language dependent comments (optional) in the form { \"<lang>\": \"<comment>, ... } . The comments-element is optional . nodes : Array of subnodes. If you have a non-hierarchical taxonomy (i.e. a taxonomy with only 2 levels, the root level and another level), you don't have child nodes. Therefore the nodes element can be omitted in case of a flat taxonomy. Here is an example on how to build a taxonomic structure with the help of JSON: \"lists\": [ { \"name\": \"classicalmusicgenres\", \"labels\": { \"de\": \"Musikkategorien f\u00fcr klassische Musik\", \"en\": \"Genres of classical music\" }, \"nodes\": [ { \"name\": \"orchestral\", \"labels\": { \"en\": \"Orchestral music\", \"de\": \"Orchestermusik\" }, \"comments\": { \"en\": \"Multiple instruments together\", \"de\": \"Mehrere Instrumente zusammen\" }, \"nodes\": [ { \"name\": \"symphony\", \"labels\": { \"en\": \"Symphony\", \"de\": \"Symphonie\" } }, { \"name\": \"symphonicpoem\", \"labels\": { \"en\": \"Symphonic poem\", \"de\": \"Symphonische Dichtung\" } }, { \"name\": \"overture\", \"labels\": { \"en\": \"Overture\", \"de\": \"Overt\u00fcre\" } }, { \"name\": \"concerto\", \"labels\": { \"en\": \"Conerto\", \"de\": \"Konzert\" } }, ... ] }, { \"name\": \"chambermusic\", \"labels\": { \"en\": \"Chamber music\", \"de\": \"Kammermusik\" }, \"nodes\": [...] }, ... ] } ] As already mentioned before, the lists element is optional. If there are no lists, this element has to be omitted. Groups \"groups\": [<group-definition>, <group-definition>,...] This object contains groups -definitions. This is (only) used to specify the permissions a user gets. A project may define user groups such as \"project-admins\", \"students\" etc. and give the members of each group individual permissions. A group -defintion has the following elements: - name : The name of the group. - description : Description of the purpose of the group. - selfjoin : True, if users are able to join the group; false, if an administrator must add the users. - status : Has the value true if the group is active and false if the group is not active. Example: \"groups\": [ { \"name\": \"biz-editors\", \"description\": \"Editors for the BiZ-project\", \"selfjoin\": false, \"status\": true } ], The groups element is optional and can therefore be left out. Users \"users\": [<user-definition>, <user-definition>,...] This object contains user -definitions. You can set user traits here. A user has the following elements: - username : The short username for the login. Similar to a nickname. - email : Unique email that identifies the user. - givenName : Firstname of the user. - familyName : Surname of the user. - password : Password of the user. - lang : The preferred language of the user: \"en\", \"de\", \"fr\", \"it\" [optional, default: \"en\"]. - projects : List of projects the user belongs to. Example: \"users\": [ { \"username\": \"bizedit\", \"email\": \"bizedit@test.org\", \"givenName\": \"biz-given\", \"familyName\": \"biz-family\", \"password\": \"biz1234\", \"lang\": \"en\", \"groups\": [\":biz-editors\"], \"projects\": [\":admin\",\"anything:member\"] } ], The users element is optional and can therefore be omitted. Ontologies \"ontologies\": [<ontology-definition>, <ontology-definition>, ...] Most of the definitions for our ontology will be done under the category \"ontologies\": [{...}, {...}] inside of the curly brackets. A project may have multiple ontologies, where the second may depend on the first, the third on the second and first, etc. The core of the ontology definition is within the {}-brsckets. We know, you've already read a whole lot of text so far, but this section is probably the most important one. First, lets talk about what an ontology actually is. This will make it much easier to understand the different fields of the ontology definition. An ontology is a formal representation of a set of terminologies which finally represent real world objects. Dependencies, attributes and relations of and between the individual components of the set are recorded in a logical, formal language. In contrast to a taxonomy, which defines a mere hierarchical structure within a range of terms, an ontology is much more a network of information of logical dependencies of term elements. Or, in other words, an ontology defines a strict, formal \"data model\" for real world concepts such as \"Person\", \"Work\", \"Artist\" etc. A full-fledged ontology thus has to offer at least two things: a set of concepts or terms (called resources , actually \"resource classes\", but we use somehow inconsistently the term resource inhere) - that represent concepts of real world objects - as well as attributes or properties describing these resources. These properties are linked either to a final value or may define a relationship to another resource (-class). Let's assume that we define a resource called \"Person\" and two properties called \"hasBirthday\" and \"hasParent\". For a specific incarnation of a \"Person\" (we call this an instance ), \"hasBirthday\" will have a final value such as \"1960-05-21\", whereas \"hasParent\" will link to another instance of a Person. Within DSP, properties may be re-used for different resources. E.g. a property \"description\" may be used for a resource called \"image\" as well as \"movie\". Therefore the list of properties is separated from the list of resources. The properties are assigned to the resources by defining \" cardinalities \". A cardinality indicates, if a property is mandatory or can be omitted (e.g. if unknown), and if a property may be used several times on the same instance of a resource. The latter may make sense for resources that are known under several names. In such a case, a \"hasName\"-property would have a cardinality that allows multiple use on the same instance of a resource. The cardinality definitiones are explained further below . To fully capture everything an ontology has to provide, we use four different elements that describe the resources as well as the dependencies inside our ontology. They are: name label properties resources Example: \"ontologies\": [ { \"name\": \"seworon\", \"label\": \"Secrets of the world ontology\", \"properties\": [...], \"resources\": [...] }, {...}, ... ] Now lets see what each field does. Name \"name\": \"<string>\" First of all, our overall ontology needs a name. After all, we want to create a ontology about a specific subject or set of terms. As a \"speciality\", the name of the ontology has to be a xsd:NCNAME conformant name that can be used as prefix. xsd:NCNAME means that it has to be a single word without any special characters (like e.g. \" . : ! ? # + (...) \") and without any blanks. Label \"label\": \"<string>\" Since the \"name\" of your ontology needs to be in this special format, we like to have a human readable and understandable name of the ontology. This is done in the \"label\". Properties \"properties\": [<property-definition>, <property-definition>, ...] At first, it seems a bit illogical to have to define the properties before the resources. After all, a property always describes the characteristics of a resource . However, it is necessary to define the properties before the resources. The reason for that is that a property - a dependency between resources - can be used in our ontology not only for a single resource but for several. If we would e.g. have a property that describes \"is descendent of\", we can use this property not only to describe the family relations of a human family but at the same time use the same property to describe the relations of e.g. an animal family. A properties-array describes all the properties that are used for our terminology space. It's all the properties that describe all the possible connections and dependencies between our entire set of terms. The following should also be mentioned: We are restricted to a given list of data types we can choose from for our properties, . We can't create our own \"new\" data types. However, the list of value types should cover all the needs. A property has mandatory and optional fields. The following fields are mandatory: - name - labels - object - gui_element Please note that *object\" is used to define the data type. The reason is that internally each data type is again represented by a resource that holds a lot of additional information, notable a complete change history. The gui_element depends on the object The following fields are optional (can be omitted): - super - gui_attributes The gui_attributes depends on the gui_element chosen! Name \"name\": \"<NCNAME>\" A name for the property e.g. \"pageOf\", \"hasBirthdate\", \"createdBy\". Labels \"labels\": {\"<language>\": \"<string>\", ...} Similar to the name property, the label describes the property. In contrast to the name, which serves as a pure abbreviation, the label is human readable. Thus, use language dependent, human readable names e.g. \"is descendent of\". The labels-field has the following form: { \"<lang>\": \"<value>\", ...} where <lang> is either \"en\", \"de\", \"fr\" or \"it\", and <value> is a string. Object / gui_element / gui_attribute \"object\": \"<data-type-object>\" The \"object\" defines the data type of the value that the property will store. The following object types are allowed: TextValue \"object\": \"TextValue\" Represents a text that may contain standoff markup gui_elements / gui_attributes : SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes are: gui_attributes : maxlength=integer (optional): Maximal length (number of character accepted) size=integer (optional): Size (width) of widget Textarea : A GUI element for TextValue . Presents a multiline textentry box. The optional attributes are: gui_attributes : cols=integer (optional): Number of cols of the textarea rows=integer (optional): Number of rows of the textarea width=percent (optional): Width of the field on screen wrap=soft|hard (optional): Wrapping of text Richtext : A GUI element for TextValue . Provides a richtext editor. gui_attributes : No attributes Example: { \"name\": \"hasPictureTitle\", \"super\": [ \"hasValue\" ], \"object\": \"TextValue\", \"labels\": {\"en\": \"Title\"}, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"maxlength\": \"255\", \"size\": 80 } } ColorValue \"object\": \"ColorValue A string in the form \"#rrggbb\" (standard web color format) gui-elements / gui_attributes : Colorpicker : The only GUI element for ColorValue . It's used to choose a color. gui_attributes : ncolors=integer (mandatory): Number of colors the color picker should present. Example: { \"name\": \"hasColor\", \"super\": [ \"hasValue\" ], \"object\": \"ColorValue\", \"labels\": {\"en\": \"Color\"}, \"gui_element\": \"Colorpicker\" } DateValue object\": \"DateValue\" Represents a date. It's a string with the format calendar:start:end Please note that the DateValue is an extremely flexible data type. It can represent an exact date or a date with a given uncertainty, and the date can be given in several calendars (currently the Gregorian and the Julian calendars are supported, with the Jewish and Islamic coming soon). Internally, a date is always represented as a start and end date. If start and end date match, it's an exact date. A value like \"1893\" will automatically be expanded to a range from January 1st 1893 to December 31st 1893. calender is either GREGORIAN or JULIAN start has the form yyyy - mm - dd . If only the year is given, the precision is to the year. If only the year and month is given, the precision is to the month. end is optional if the date represents a clearly defined period or uncertainty. In total, a DateValue has the following form: \"GREGORIAN:1925:1927-03-22\" which means anytime in between 1925 and the 22nd March 1927. gui-elements / gui_attributes : - Date : The only GUI element for DateValue . A date picker gui. gui_attributes : No attributes Example: { \"name\": \"hasDate\", \"super\": [ \"hasValue\" ], \"object\": \"DateValue\", \"labels\": {\"en\": \"Date\"}, \"gui_element\": \"Date\" } DecimalValue \"object\": \"DecimalValue\" A number with decimal point gui-elements / gui_attributes : - Slider : A GUI element for DecimalValue . Provides a slider to select a decimal value. gui_attributes : - max=decimal (mandatory): Maximal value - min=decimal (mandatory): Minimal value - SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : - maxlength=integer (optional): The maximum number of characters accepted - size=integer\" (optional): The size of the input field Example: { \"name\": \"hasDecimal\", \"super\": [ \"hasValue\" ], \"object\": \"DecimalValue\", \"labels\": {\"en\": \"Decimal number\"}, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"maxlength\": \"255\", \"size\": 80 } } GeomValue \"object\": \"GeomValue\" Represents a geometrical shape as JSON. Geometrical shapes are used to define regions of interest (ROI's) on still images or moving images. gui-elements / gui_attributes : - Geometry : Not Yet Implemented. gui_attributes : No attributes - SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : - maxlength=integer (optional): The maximum number of characters accepted - size=integer\" (optional): The size of the input field Example : { \"name\": \"hasGeometry\", \"super\": [ \"hasValue\" ], \"object\": \"GeomValue\", \"labels\": \"Geometry\", \"gui_element\": \"SimpleText\" } GeonameValue Represents a location ID in geonames.org. The DSP platform uses identifiers provided by geonames.org to identify geographical locations. gui-elements / gui_attributes : - Geonames : The only valid GUI element for GeonameValue . It interfaces are with geonames.org and it allows to select a location. gui_attributes : No attributes Example: { \"name\": \"hasGeoname\", \"super\": [ \"hasValue\" ], \"object\": \"GeonameValue\", \"labels\": {\"en\": \"Geoname\"}, \"gui_element\": \"Geonames\" } IntValue \"object\": \"IntValue\" Represents an integer value gui-elements / gui_attributes : - SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : - maxlength=integer (optional): The maximum number of characters accepted - size=integer\" (optional): The size of the input field - Spinbox : A GUI element for IntegerValue . A text field with and \"up\"- and \"down\"-button for increment/decrement. The attributes \"max=decimal\" and \"min=decimal\" are optional. gui_attributes : - max=integer (optional): Maximal value - min=integer (optional): Minimal value Example: { \"name\": \"hasInteger\", \"super\": [ \"hasValue\" ], \"object\": \"IntValue\", \"labels\": {\"en\": \"Integer\"}, \"gui_element\": \"Spinbox\", \"gui_attributes\": { \"max\": 0.0, \"min\": 10.0 } } BooleanValue \"object\": \"BooleanValue\" Represents a Boolean (\"true\" or \"false) gui-elements / gui_attributes : - Checkbox : A GUI element for BooleanValue . gui_attributes : No attributes Example: { \"name\": \"hasBoolean\", \"super\": [ \"hasValue\" ], \"object\": \"BooleanValue\", \"labels\": {\"en\": \"Boolean value\"}, \"gui_element\": \"Checkbox\" } UriValue \"object\": \"UriValue\" Represents an URI gui-elements / gui_attributes : - SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : - maxlength=integer (optional): The maximum number of characters accepted - size=integer\" (optional): The size of the input field Example: { \"name\": \"hasUri\", \"super\": [ \"hasValue\" ], \"object\": \"UriValue\", \"labels\": {\"en\": \"URI\"}, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"maxlength\": \"255\", \"size\": 80 } } IntervalValue \"object\": \"IntervalValue\" Represents a time-interval gui-elements / gui_attributes : - SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : - maxlength=integer (optional): The maximum number of characters accepted - size=integer\" (optional): The size of the input field - Interval : Not Yet Implemented. gui_attributes : No attributes Example: { \"name\": \"hasInterval\", \"super\": [ \"hasValue\" ], \"object\": \"IntervalValue\", \"labels\": {\"en\": \"Time interval\"}, \"gui_element\": \"Interval\" } ListValue \"object\": \"ListValue\" Represents a node of a (possibly hierarchical) list gui-elements / gui_attributes : - Radio : A GUI element for ListValue . A set of radio buttons. This works only with flat lists! gui_attributes : - hlist=<list-name> (mandatory): The reference of a list root node - List : A GUI element for ListValue . A list of values to select one from. gui_attributes : - hlist=<list-name> (mandatory): The reference of a list root node - Pulldown : A GUI element for ListValue . Pulldown for list values. Works also for hierarchical lists. gui_attributes : - hlist=<list-name> (mandatory): The reference of a list root node Example: { \"name\": \"hasListItem\", \"super\": [ \"hasValue\" ], \"object\": \"ListValue\", \"labels\": {\"en\": \"List element\"}, \"gui_element\": \"List\", \"gui_attributes\": { \"hlist\": \"treelistroot\" } } LinkValue \"object\": \":<resource-name>\" LinkValues do not follow the pattern of the previous data types, because they do not connect to a final value but to another resource which has to be defined. Thus, the \"object\" denomiates the resource class the link will point to. If the resource is defined in the same ontology, the name has to be prepended by a \":\", if the resource is defined in another (previously defined) ontology, the ontology name has to be prepended separated by a color \":\", e.g. \"other-onto:MyResource\". The \"super\"-element has to be \"hasLinkTo\" or at least derived from \"hasLinkTo\" (how to derive a resource or property from another one is not part of this documentation). gui-elements/gui_attributes : - Searchbox : Must be used with hasLinkTo properties. Allows to search and enter a resource that the given resource should link to. It has one gui_attribute that indicates how many properties of the found resources should be indicated. It's mandatory! gui_attributes : - numprops=integer (mandatory): While dynamically displaying the search result, the number of properties that should be displayed. Example: { \"name\": \"hasOtherThing\", \"super\": [ \"hasLinkTo\" ], \"object\": \":Thing\", \"labels\": \"Another thing\", \"gui_element\": \"Searchbox\" } Like already mentioned before: The following two fields are optional (can be omitted), with the notable exception of the \"super\" clause in case of LinkValues where the super clause is mandatory: Super \"super\": [\"<super-property>\", \"<super-property>, ...] A property must be derived from at least one base property. The most generic base property that the DSP offers is hasValue . In addition the property may be a subproperty of properties defined in external or other ontologies. External ontologies like dcterms or foaf must be defined in the \"prefix\"-section. In this case the qualified name - including the prefix of the external or internal ontology- has to be given. The following base properties are defined by DSP: - hasValue : This is the most generic base. - hasLinkTo : This value represents a link to another resource. You have to indicate the \" object \" as a prefixed name that identifies the resource class this link points to (a \":\" prepended to the name is sufficient if the resource is defined in the current ontology). - hasColor : Defines a color value ( ColorValue ) - hasComment : Defines a \"standard\" comment - hasGeometry : Defines a geometry value (a JSON describing a polygon, circle or rectangle), see ColorValue - isPartOf : A special variant of hasLinkTo . It says that an instance of the given resource class is an integral part of another resource class. E.g. a \"page\" is part of a \"book\". - isRegionOf : A special variant of hasLinkTo . It means that the given resource class is a \"region\" of another resource class. This is typically used to describe regions of interest in images. - isAnnotationOf : A special variant of hasLinkTo . It denotes the given resource class as an annotation to another resource class. - seqnum : An integer that is used to define a sequence number in an ordered set of instances, e.g. the ordering of the pages in a bokk (independent of the page naming) To sum the Properties section up, here we have an example for a complete properties definition: \"properties\": [ { \"name\": \"schulcode\", \"object\": \"TextValue\", \"labels\": { \"de\": \"Schulcode\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 32, \"maxlength\": 128 } }, { \"name\": \"schulname\", \"object\": \"TextValue\", \"labels\": { \"de\": \"Name der Schule\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 32, \"maxlength\": 128 } } ] Resources \"resources\": [<resource-definition>, <resource-definition>, ...] The resource classes are the primary entities of the data model. They are the actual objects/terms inside our terminology space. A resource class is a template for the representation of a real object that is represented in the DaSCH database. A resource class defines properties (aka data fields ). For each of these properties a data type as well as the cardinality have to defined. A resource needs to have the following fields: Name \"name\": \"<NCNAME>\" A name for the resource. Labels \"labels\": {\"<lang>\": \"<string>\", ...} The string displayed of the resource is being accessed. Super \"super\": [\"<super-resource>\", \"<super-resource>\", ...] A resource is always derived from at least one other resource. The most generic resource class DSP offers is \"Resource\" . A resource may additionally also be derived from resources defined in external ontologies. The following parent predefined resources are provided by Knora: Resource A generic \"thing\" that represents an item from the real world StillImageRepresentation : An object that is connected to a still image TextRepresentation : An object that is connected to an (external) text (Not Yet Implemented) AudioRepresentation : An object representing audio data (Not Yet Implemented) DDDRepresentation : An object representing a 3-D representation (Not Yet Implemented) DocumentRepresentation : An object representing an opaque document (e.g. a PDF) MovingImageRepresentation : An object representing a moving image (video, film) Annotation : A predefined annotation object. It has automaticalle the following predefined properties defined: hasComment (1-n) isAnnotationOf (1) LinkObj : A resource class linking together several other, generic, resource classes. The class has the following properties: hasComment (1-n) hasLinkTo (1-n) Region : Represents a simple region. The class has the following properties: hasColor (1) isRegionOf (1) hasGeometry (1) isRegionOf (1) hasComment (0-n) Cardinalities \"cardinalities\": [...] Cardinalities is an array that contains the information about the connections between resources. It tells what type connections a single resource has as well as how many times the connection is established. Thus, the actual \"network\" is saved in this array cardinalities : Array of references to the properties that the resource may hold including the cardinality. A cardinality has the following properties: propname : The name of the property. If it's used in the form \":\"propname, the current ontology is referenced. If the \":\" is omitted, a DSP standard ontology is referenced, otherwise the full prefix of the ontology has to be used. gui_order : An integer number which will help the GUI to display the properties in the desired order cardinality : Indicates how often a given property may occur. The possible values are: \"1\" : Exactly once (mandatory one value and only one) \"0-1\" : The value may be omitted, but can occur only once \"1-n\" : At least one value must be present. But multiple values may be present \"0-n\" : The value may be omitted, but may also occur multiple times Example for a resource definition: \"resources\": [ { \"name\": \"Schule\", \"super\": \"Resource\", \"labels\": { \"de\": \"Schule\" }, \"cardinalities\": [ { \"propname\": \":schulcode\", \"gui_order\": 1, \"cardinality\": \"1\" }, { \"propname\": \":schulname\", \"gui_order\": 2, \"cardinality\": \"1\" }, { \"propname\": \":bildungsgang\", \"gui_order\": 3, \"cardinality\": \"1\" } ] }] Fully fleshed out example ontology Finally, we show a complete example of an ontology definition. { \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" }, \"project\": { \"shortcode\": \"0170\", \"shortname\": \"teimp\", \"longname\": \"Test Import\", \"descriptions\": { \"en\": \"This is a project for testing the creation of ontologies and data\", \"de\": \"Dies ist ein Projekt, um die Erstellung von Ontologien und Datenimport zu testen\" }, \"keywords\": [\"test\", \"import\"], \"lists\": [{ \"name\": \"orgtpye\", \"labels\": { \"de\": \"Roganisationsart\", \"en\": \"Organization Type\" }, \"nodes\": [{ \"name\": \"business\", \"labels\": { \"en\": \"Commerce\", \"de\": \"Handel\" }, \"comments\": { \"en\": \"no comment\", \"de\": \"kein Kommentar\" }, \"nodes\": [{ \"name\": \"transport\", \"labels\": { \"en\": \"Transportation\", \"de\": \"Transport\" } }, { \"name\": \"finances\", \"labels\": { \"en\": \"Finances\", \"de\": \"Finanzen\" } } ] }, { \"name\": \"society\", \"labels\": { \"en\": \"Society\", \"de\": \"Gesellschaft\" } } ] }], \"ontologies\": [{ \"name\": \"teimp\", \"label\": \"Test import ontology\", \"properties\": [{ \"name\": \"firstname\", \"super\": [\"hasValue\", \"foaf:givenName\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Firstname\", \"de\": \"Vorname\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 24, \"maxlength\": 32 } }, { \"name\": \"lastname\", \"super\": [\"hasValue\", \"foaf:familyName\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Lastname\", \"de\": \"Nachname\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 24, \"maxlength\": 64 } }, { \"name\": \"member\", \"super\": [\"hasLinkTo\"], \"object\": \"teimp:organization\", \"labels\": { \"en\": \"member of\", \"de\": \"Mitglied von\" }, \"gui_element\": \"Searchbox\" }, { \"name\": \"name\", \"super\": [\"hasValue\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Name\", \"de\": \"Name\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 64, \"maxlength\": 64 } }, { \"name\": \"orgtype\", \"super\": [\"hasValue\"], \"object\": \"ListValue\", \"labels\": { \"en\": \"Organizationtype\", \"de\": \"Organisationstyp\" }, \"comments\": { \"en\": \"Type of organization\", \"de\": \"Art der Organisation\" }, \"gui_element\": \"Pulldown\", \"gui_attributes\": { \"hlist\": \"orgtype\" } } ], \"resources\": [{ \"name\": \"person\", \"super\": \"Resource\", \"labels\": { \"en\": \"Person\", \"de\": \"Person\" }, \"comments\": { \"en\": \"Represents a human being\", \"de\": \"Repr\u00e4sentiert eine Person/Menschen\" }, \"cardinalities\": [{ \"propname\": \":firstname\", \"gui_order\": 1, \"cardinality\": \"1\" }, { \"propname\": \":lastname\", \"gui_order\": 2, \"cardinality\": \"1\" }, { \"propname\": \":member\", \"gui_order\": 3, \"cardinality\": \"0-n\" } ] }, { \"name\": \"organization\", \"super\": \"Resource\", \"labels\": { \"en\": \"Organization\", \"de\": \"Organisation\" }, \"comments\": { \"en\": \"Denotes an organizational unit\", \"de\": \"Eine Institution oder Tr\u00e4gerschaft\" }, \"cardinalities\": [{ \"propname\": \":name\", \"gui_order\": 1, \"cardinality\": \"1-n\" }, { \"propname\": \":orgtype\", \"gui_order\": 2, \"cardinality\": \"1-n\" } ] } ] }] } }","title":"JSON data model format"},{"location":"dsp-tools-create/#json-ontology-definition-format","text":"","title":"JSON ontology definition format"},{"location":"dsp-tools-create/#introduction","text":"This document contains all the information you need to create an ontology that's used by DSP. In the first section you find a rough overview of the ontology definition, all the necessary components with a definition and a short example of the definition.","title":"Introduction"},{"location":"dsp-tools-create/#a-short-overview","text":"In the following section, you find all the mentioned parts with a detailed explanation. Right at the beginning we look at the basic fields that belong to an ontology definition. This serves as an overview for you to which you can return at any time while you read the description. A complete ontology definition looks like this: { \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" }, \"project\": { \"shortcode\": \"0123\", \"shortname\": \"BiZ\", \"longname\": \"Bildung in Zahlen\", \"descriptions\": {}, \"keywords\": [], \"lists\": [], \"groups\": [], \"users\": [], \"ontologies\": [] } } As you can see, only two umbrella terms define our ontology: the \"prefixes\" object and the \"project\" object. In the following we take a deeper look into both of them since, as you can see in the example above, both objects have further fine grained definition levels.","title":"A short overview"},{"location":"dsp-tools-create/#prefixes-object","text":"\"prefixes\": { \"prefix\": <iri>\", ...} The \"prefixes\" object contains - as you may already have guessed by the name - the prefixes of external ontologies that are also used in the current project. All prefixes are composed of a keyword, followed by its iri. This is used as a shortcut for later so that you don't always have to specify the full qualified iri but can use the much shorter keyword instead. That means that e.g. instead of addressing a property called \"familyname\" via http://xmlns.com/foaf/0.1/familyName you can simply use foaf:familyName. As you can see in the example below, you can have more then one prefix too. In the example we have \"foaf\" as well as \"dcterms\" as our prefixes. { \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" } }","title":"\"Prefixes\" object"},{"location":"dsp-tools-create/#project-object","text":"\"project\": {\"key\": <value>\", ...} Right after the \"prefix\" object the \"project\" object has to follow, which contains all resources and properties of the ontology. The \"project\" object is the bread and butter of the ontology. All its important properties are specified therein. As you saw in the complete ontology definition in the beginning, the project definitions requires exactly all of the following datafields: shortcode shortname longname keywords ontologies Whereas the following fields are optional (if one or more of these fields are not used, it must be omitted): descriptions lists groups users So a simple example definition of the \"project\" object could look like this: \"project\": { \"shortcode\": \"0809\", \"shortname\": \"test\" , \"longname\": \"Test Example\", \"descriptions\": { \"en\": \"This is a simple example project\", \"de\": \"Dies ist ein einfaches Beispielprojekt\" } \"keywords\": [\"example\", \"simple\"], \"lists\": [\u2026], \"groups\": [\u2026], \"users\": [\u2026], \"ontology\": [\u2026] }","title":"\"Project\" object"},{"location":"dsp-tools-create/#simple-keyvalue-pairs","text":"At that point we will go through all of this step by step and take a more in depth view on the individual fields of the \"project\" object. The first four fields of the \"project\" object are \"key\"/\"value\" pairs. Therefore they are quite simple.","title":"Simple key/value pairs"},{"location":"dsp-tools-create/#shortcode","text":"\"shortcode\": \"<4-hex-characters> It's a hexadecimal string in the range between \"0000\" and \"FFFF\" that's used to uniquely identifying the project. The shortcode has to be provided by the DaSCH.","title":"Shortcode"},{"location":"dsp-tools-create/#shortname","text":"\"shortname\": \"<string>\" This is a short name (string) for the project. It's ment to be like a nickname. If the name of the project is e.g. \"Albus Percival Wulfric Dumbledore\", then the shortname for it could be \"Albi\". It should be in the form of a xsd:NCNAME , that is a name without blanks and special characters like \":\", \";\", \"&\", \"%\" etc., but \"-\" and \"_\" are allowed","title":"Shortname"},{"location":"dsp-tools-create/#longname","text":"\"longname\": \"<string>\" A longer string that provides the full name of the project. In our example, the longname would be \"Albus Percival Wulfric Dumbledore\".","title":"Longname"},{"location":"dsp-tools-create/#descriptions","text":"\"descriptions\": {\"<lang>\": \"<string>\", ...} The descriptions specify the content of the project in exactly one or more strings. These descriptions can be supplied in several languages (currently \"en\" , \"de\" , \"fr\" and \"it\" are supported). The descriptions have to be given as a JSON object with the language as \"key\" and the description as \"value\". See the example above inside the curly brackets after \"descriptions\" to see what that means.","title":"Descriptions"},{"location":"dsp-tools-create/#keyobject-pairs","text":"The following fields are not simple \"key\"/\"value\" pairs. They do have a key, the value however is another object and therefore has an internal structure. Due to the increased complexity of these objects, they are looked at in more detail.","title":"Key/object pairs"},{"location":"dsp-tools-create/#keywords","text":"\"keywords\": [\"<string>\", \"<string>\", ...] An array of keywords is used to roughly describe the project in single words. A project that deals e.g. with old monastery manuscripts could possess the keywords \"monastery\", \"manuscripts\", \"medieval\", (...). The array can be empty as well e.i. \"keywords\": [].","title":"Keywords"},{"location":"dsp-tools-create/#lists","text":"\"lists\": [<list-definition>,<list-definition>,...] Often in order to characterize or classify a real world object, we use a sequential or hierarchical list of terms. For example a hypothetical classification of classical music genres could be as : Orchestral music Symphony Symphony poem Overture Concerto Ballet Incidential music Suite Chamber music String trio Piano trio String quartet Piano quartet String quintet Piano quintet Other Solo instrumental Organ Piano Harpsichord Spinet Guitar Lute Violin Flute Other Vocal Music Choir Oratorios Passions Cantatas Masses Motets Madrigals Psalms Solo Songs Arias Opera Comic opera Serious Opera Opera Semiseria Opera Conrnique Grand opera Opera verismo DSP allows to define such controlled vocabularies or thesauri. They can be arranged \"flat\" or in \"hierarchies\" (as the given example about music genres is). The definition of these entities are called \"lists\" in the DSP. Thus, the list object is used to give the resources of the ontology a taxonomic quality. A taxonomy makes it possible to categorize a resource. The big advantage of a taxonomic structure as it is implemented by the DSP is that the user can subcategorize the objects. This allows the user to formulate his search requests more or less specifically as desired. Thus, in the example above a search for \"Vocal music\" would result in all works that ate characterized by a subelement of \"Vocal music\". However a search for \"Masses\" would retrun only works that have been characterized as such. The number of hierarchy levels is not limited, but for practical reasons should not exceed 3-4 levels Thus, a taxonomy is a hierarchical list of categories in a tree-like structure. The taxonomy must be complete. This means that the entire set of resources must be mappable to the sub-categorization of the taxonomy. To come back to the previous example: It must not occur that an musical work within our resource set cannot be mapped to a subcategory of our taxonomy about classical music. The taxonomic-hierarchical structure is mapped using JSON. This is because JSON inherently implements a tree structure as well. The root of the taxonomy tree is always the name of the taxonomy. The root always stands alone at the top of the tree. It is followed by any number of levels, on which any number of subcategories can be placed. Suppose you want to build a taxonomy of the classical musical genres as above. The root level would be the name of the taxonomy e.g. \"classicalmusicgenres\". The next level on the hierarchy would be the basic genres, in our example \"Orchestral music\", \"Chamber music\", \"Solo instrumental\", \"Vocal Music\" and \"Opera\". Each if these categories may have subcategories. In our example \"Opera\" would have the subcategories \"Comic opera\", \"Serious Opera\", \"Opera Semiseria\", \"Opera Cornique\", \"Grand opera\" and \"Opera verismo\". Each of these could again have subcategories, and so forth. It is important to note that a flat taxonomy is also allowed. This means that a taxonomy from exactly two levels is allowed. We have a root level, with the name of the taxonomy, followed by a single level. Within this second level, any number of categories can coexist equally, but since they are on the same level, they are not hierarchically dependent on each other. For example, you could define a taxonomy \"soccer clubs\", which have the categories \"FCB\", \"FCZ\", (...) in the second level. FC Basel has no hierarchical connection to FC Z\u00fcrich. Their taxonomic structure is therefore flat. A resource can be assigned to a taxonomic node within its properties. So a resource of type \"musical work\" with the title \"La Traviata\" would have the property/attribute \"musical-genre\" with the value \"Grand opera\". Within the DSP, each property or attribute has an assigned cardinality. Sometimes, a taxonomy allows that an object may belong to different categories at the same time (e.g. an image which depicts several categories at the same time). In these cases, a cardinality > 1 allows to add multiple attributes of the same time. See further below the description of the cardinalities A node of the Taxonomy may have the following elements: name : Name of the node. This should be unique for the given list. The name-element is optional but highly recommended]. labels : Language dependent labels in the form { \"<lang>\": \"<label>, ... } . The labels-element is mandatory . It needs to specify at least one language. comments : Language dependent comments (optional) in the form { \"<lang>\": \"<comment>, ... } . The comments-element is optional . nodes : Array of subnodes. If you have a non-hierarchical taxonomy (i.e. a taxonomy with only 2 levels, the root level and another level), you don't have child nodes. Therefore the nodes element can be omitted in case of a flat taxonomy. Here is an example on how to build a taxonomic structure with the help of JSON: \"lists\": [ { \"name\": \"classicalmusicgenres\", \"labels\": { \"de\": \"Musikkategorien f\u00fcr klassische Musik\", \"en\": \"Genres of classical music\" }, \"nodes\": [ { \"name\": \"orchestral\", \"labels\": { \"en\": \"Orchestral music\", \"de\": \"Orchestermusik\" }, \"comments\": { \"en\": \"Multiple instruments together\", \"de\": \"Mehrere Instrumente zusammen\" }, \"nodes\": [ { \"name\": \"symphony\", \"labels\": { \"en\": \"Symphony\", \"de\": \"Symphonie\" } }, { \"name\": \"symphonicpoem\", \"labels\": { \"en\": \"Symphonic poem\", \"de\": \"Symphonische Dichtung\" } }, { \"name\": \"overture\", \"labels\": { \"en\": \"Overture\", \"de\": \"Overt\u00fcre\" } }, { \"name\": \"concerto\", \"labels\": { \"en\": \"Conerto\", \"de\": \"Konzert\" } }, ... ] }, { \"name\": \"chambermusic\", \"labels\": { \"en\": \"Chamber music\", \"de\": \"Kammermusik\" }, \"nodes\": [...] }, ... ] } ] As already mentioned before, the lists element is optional. If there are no lists, this element has to be omitted.","title":"Lists"},{"location":"dsp-tools-create/#groups","text":"\"groups\": [<group-definition>, <group-definition>,...] This object contains groups -definitions. This is (only) used to specify the permissions a user gets. A project may define user groups such as \"project-admins\", \"students\" etc. and give the members of each group individual permissions. A group -defintion has the following elements: - name : The name of the group. - description : Description of the purpose of the group. - selfjoin : True, if users are able to join the group; false, if an administrator must add the users. - status : Has the value true if the group is active and false if the group is not active. Example: \"groups\": [ { \"name\": \"biz-editors\", \"description\": \"Editors for the BiZ-project\", \"selfjoin\": false, \"status\": true } ], The groups element is optional and can therefore be left out.","title":"Groups"},{"location":"dsp-tools-create/#users","text":"\"users\": [<user-definition>, <user-definition>,...] This object contains user -definitions. You can set user traits here. A user has the following elements: - username : The short username for the login. Similar to a nickname. - email : Unique email that identifies the user. - givenName : Firstname of the user. - familyName : Surname of the user. - password : Password of the user. - lang : The preferred language of the user: \"en\", \"de\", \"fr\", \"it\" [optional, default: \"en\"]. - projects : List of projects the user belongs to. Example: \"users\": [ { \"username\": \"bizedit\", \"email\": \"bizedit@test.org\", \"givenName\": \"biz-given\", \"familyName\": \"biz-family\", \"password\": \"biz1234\", \"lang\": \"en\", \"groups\": [\":biz-editors\"], \"projects\": [\":admin\",\"anything:member\"] } ], The users element is optional and can therefore be omitted.","title":"Users"},{"location":"dsp-tools-create/#ontologies","text":"\"ontologies\": [<ontology-definition>, <ontology-definition>, ...] Most of the definitions for our ontology will be done under the category \"ontologies\": [{...}, {...}] inside of the curly brackets. A project may have multiple ontologies, where the second may depend on the first, the third on the second and first, etc. The core of the ontology definition is within the {}-brsckets. We know, you've already read a whole lot of text so far, but this section is probably the most important one. First, lets talk about what an ontology actually is. This will make it much easier to understand the different fields of the ontology definition. An ontology is a formal representation of a set of terminologies which finally represent real world objects. Dependencies, attributes and relations of and between the individual components of the set are recorded in a logical, formal language. In contrast to a taxonomy, which defines a mere hierarchical structure within a range of terms, an ontology is much more a network of information of logical dependencies of term elements. Or, in other words, an ontology defines a strict, formal \"data model\" for real world concepts such as \"Person\", \"Work\", \"Artist\" etc. A full-fledged ontology thus has to offer at least two things: a set of concepts or terms (called resources , actually \"resource classes\", but we use somehow inconsistently the term resource inhere) - that represent concepts of real world objects - as well as attributes or properties describing these resources. These properties are linked either to a final value or may define a relationship to another resource (-class). Let's assume that we define a resource called \"Person\" and two properties called \"hasBirthday\" and \"hasParent\". For a specific incarnation of a \"Person\" (we call this an instance ), \"hasBirthday\" will have a final value such as \"1960-05-21\", whereas \"hasParent\" will link to another instance of a Person. Within DSP, properties may be re-used for different resources. E.g. a property \"description\" may be used for a resource called \"image\" as well as \"movie\". Therefore the list of properties is separated from the list of resources. The properties are assigned to the resources by defining \" cardinalities \". A cardinality indicates, if a property is mandatory or can be omitted (e.g. if unknown), and if a property may be used several times on the same instance of a resource. The latter may make sense for resources that are known under several names. In such a case, a \"hasName\"-property would have a cardinality that allows multiple use on the same instance of a resource. The cardinality definitiones are explained further below . To fully capture everything an ontology has to provide, we use four different elements that describe the resources as well as the dependencies inside our ontology. They are: name label properties resources Example: \"ontologies\": [ { \"name\": \"seworon\", \"label\": \"Secrets of the world ontology\", \"properties\": [...], \"resources\": [...] }, {...}, ... ] Now lets see what each field does.","title":"Ontologies"},{"location":"dsp-tools-create/#name","text":"\"name\": \"<string>\" First of all, our overall ontology needs a name. After all, we want to create a ontology about a specific subject or set of terms. As a \"speciality\", the name of the ontology has to be a xsd:NCNAME conformant name that can be used as prefix. xsd:NCNAME means that it has to be a single word without any special characters (like e.g. \" . : ! ? # + (...) \") and without any blanks.","title":"Name"},{"location":"dsp-tools-create/#label","text":"\"label\": \"<string>\" Since the \"name\" of your ontology needs to be in this special format, we like to have a human readable and understandable name of the ontology. This is done in the \"label\".","title":"Label"},{"location":"dsp-tools-create/#properties","text":"\"properties\": [<property-definition>, <property-definition>, ...] At first, it seems a bit illogical to have to define the properties before the resources. After all, a property always describes the characteristics of a resource . However, it is necessary to define the properties before the resources. The reason for that is that a property - a dependency between resources - can be used in our ontology not only for a single resource but for several. If we would e.g. have a property that describes \"is descendent of\", we can use this property not only to describe the family relations of a human family but at the same time use the same property to describe the relations of e.g. an animal family. A properties-array describes all the properties that are used for our terminology space. It's all the properties that describe all the possible connections and dependencies between our entire set of terms. The following should also be mentioned: We are restricted to a given list of data types we can choose from for our properties, . We can't create our own \"new\" data types. However, the list of value types should cover all the needs. A property has mandatory and optional fields. The following fields are mandatory: - name - labels - object - gui_element Please note that *object\" is used to define the data type. The reason is that internally each data type is again represented by a resource that holds a lot of additional information, notable a complete change history. The gui_element depends on the object The following fields are optional (can be omitted): - super - gui_attributes The gui_attributes depends on the gui_element chosen!","title":"Properties"},{"location":"dsp-tools-create/#name_1","text":"\"name\": \"<NCNAME>\" A name for the property e.g. \"pageOf\", \"hasBirthdate\", \"createdBy\".","title":"Name"},{"location":"dsp-tools-create/#labels","text":"\"labels\": {\"<language>\": \"<string>\", ...} Similar to the name property, the label describes the property. In contrast to the name, which serves as a pure abbreviation, the label is human readable. Thus, use language dependent, human readable names e.g. \"is descendent of\". The labels-field has the following form: { \"<lang>\": \"<value>\", ...} where <lang> is either \"en\", \"de\", \"fr\" or \"it\", and <value> is a string.","title":"Labels"},{"location":"dsp-tools-create/#object-gui_element-gui_attribute","text":"\"object\": \"<data-type-object>\" The \"object\" defines the data type of the value that the property will store. The following object types are allowed:","title":"Object / gui_element / gui_attribute"},{"location":"dsp-tools-create/#textvalue","text":"\"object\": \"TextValue\" Represents a text that may contain standoff markup gui_elements / gui_attributes : SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes are: gui_attributes : maxlength=integer (optional): Maximal length (number of character accepted) size=integer (optional): Size (width) of widget Textarea : A GUI element for TextValue . Presents a multiline textentry box. The optional attributes are: gui_attributes : cols=integer (optional): Number of cols of the textarea rows=integer (optional): Number of rows of the textarea width=percent (optional): Width of the field on screen wrap=soft|hard (optional): Wrapping of text Richtext : A GUI element for TextValue . Provides a richtext editor. gui_attributes : No attributes Example: { \"name\": \"hasPictureTitle\", \"super\": [ \"hasValue\" ], \"object\": \"TextValue\", \"labels\": {\"en\": \"Title\"}, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"maxlength\": \"255\", \"size\": 80 } }","title":"TextValue"},{"location":"dsp-tools-create/#colorvalue","text":"\"object\": \"ColorValue A string in the form \"#rrggbb\" (standard web color format) gui-elements / gui_attributes : Colorpicker : The only GUI element for ColorValue . It's used to choose a color. gui_attributes : ncolors=integer (mandatory): Number of colors the color picker should present. Example: { \"name\": \"hasColor\", \"super\": [ \"hasValue\" ], \"object\": \"ColorValue\", \"labels\": {\"en\": \"Color\"}, \"gui_element\": \"Colorpicker\" }","title":"ColorValue"},{"location":"dsp-tools-create/#datevalue","text":"object\": \"DateValue\" Represents a date. It's a string with the format calendar:start:end Please note that the DateValue is an extremely flexible data type. It can represent an exact date or a date with a given uncertainty, and the date can be given in several calendars (currently the Gregorian and the Julian calendars are supported, with the Jewish and Islamic coming soon). Internally, a date is always represented as a start and end date. If start and end date match, it's an exact date. A value like \"1893\" will automatically be expanded to a range from January 1st 1893 to December 31st 1893. calender is either GREGORIAN or JULIAN start has the form yyyy - mm - dd . If only the year is given, the precision is to the year. If only the year and month is given, the precision is to the month. end is optional if the date represents a clearly defined period or uncertainty. In total, a DateValue has the following form: \"GREGORIAN:1925:1927-03-22\" which means anytime in between 1925 and the 22nd March 1927. gui-elements / gui_attributes : - Date : The only GUI element for DateValue . A date picker gui. gui_attributes : No attributes Example: { \"name\": \"hasDate\", \"super\": [ \"hasValue\" ], \"object\": \"DateValue\", \"labels\": {\"en\": \"Date\"}, \"gui_element\": \"Date\" }","title":"DateValue"},{"location":"dsp-tools-create/#decimalvalue","text":"\"object\": \"DecimalValue\" A number with decimal point gui-elements / gui_attributes : - Slider : A GUI element for DecimalValue . Provides a slider to select a decimal value. gui_attributes : - max=decimal (mandatory): Maximal value - min=decimal (mandatory): Minimal value - SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : - maxlength=integer (optional): The maximum number of characters accepted - size=integer\" (optional): The size of the input field Example: { \"name\": \"hasDecimal\", \"super\": [ \"hasValue\" ], \"object\": \"DecimalValue\", \"labels\": {\"en\": \"Decimal number\"}, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"maxlength\": \"255\", \"size\": 80 } }","title":"DecimalValue"},{"location":"dsp-tools-create/#geomvalue","text":"\"object\": \"GeomValue\" Represents a geometrical shape as JSON. Geometrical shapes are used to define regions of interest (ROI's) on still images or moving images. gui-elements / gui_attributes : - Geometry : Not Yet Implemented. gui_attributes : No attributes - SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : - maxlength=integer (optional): The maximum number of characters accepted - size=integer\" (optional): The size of the input field Example : { \"name\": \"hasGeometry\", \"super\": [ \"hasValue\" ], \"object\": \"GeomValue\", \"labels\": \"Geometry\", \"gui_element\": \"SimpleText\" }","title":"GeomValue"},{"location":"dsp-tools-create/#geonamevalue","text":"Represents a location ID in geonames.org. The DSP platform uses identifiers provided by geonames.org to identify geographical locations. gui-elements / gui_attributes : - Geonames : The only valid GUI element for GeonameValue . It interfaces are with geonames.org and it allows to select a location. gui_attributes : No attributes Example: { \"name\": \"hasGeoname\", \"super\": [ \"hasValue\" ], \"object\": \"GeonameValue\", \"labels\": {\"en\": \"Geoname\"}, \"gui_element\": \"Geonames\" }","title":"GeonameValue"},{"location":"dsp-tools-create/#intvalue","text":"\"object\": \"IntValue\" Represents an integer value gui-elements / gui_attributes : - SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : - maxlength=integer (optional): The maximum number of characters accepted - size=integer\" (optional): The size of the input field - Spinbox : A GUI element for IntegerValue . A text field with and \"up\"- and \"down\"-button for increment/decrement. The attributes \"max=decimal\" and \"min=decimal\" are optional. gui_attributes : - max=integer (optional): Maximal value - min=integer (optional): Minimal value Example: { \"name\": \"hasInteger\", \"super\": [ \"hasValue\" ], \"object\": \"IntValue\", \"labels\": {\"en\": \"Integer\"}, \"gui_element\": \"Spinbox\", \"gui_attributes\": { \"max\": 0.0, \"min\": 10.0 } }","title":"IntValue"},{"location":"dsp-tools-create/#booleanvalue","text":"\"object\": \"BooleanValue\" Represents a Boolean (\"true\" or \"false) gui-elements / gui_attributes : - Checkbox : A GUI element for BooleanValue . gui_attributes : No attributes Example: { \"name\": \"hasBoolean\", \"super\": [ \"hasValue\" ], \"object\": \"BooleanValue\", \"labels\": {\"en\": \"Boolean value\"}, \"gui_element\": \"Checkbox\" }","title":"BooleanValue"},{"location":"dsp-tools-create/#urivalue","text":"\"object\": \"UriValue\" Represents an URI gui-elements / gui_attributes : - SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : - maxlength=integer (optional): The maximum number of characters accepted - size=integer\" (optional): The size of the input field Example: { \"name\": \"hasUri\", \"super\": [ \"hasValue\" ], \"object\": \"UriValue\", \"labels\": {\"en\": \"URI\"}, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"maxlength\": \"255\", \"size\": 80 } }","title":"UriValue"},{"location":"dsp-tools-create/#intervalvalue","text":"\"object\": \"IntervalValue\" Represents a time-interval gui-elements / gui_attributes : - SimpleText : A GUI element for TextValue . A simple text entry box (one line only). The attributes \"maxlength=integer\" and \"size=integer\" are optional. gui_attributes : - maxlength=integer (optional): The maximum number of characters accepted - size=integer\" (optional): The size of the input field - Interval : Not Yet Implemented. gui_attributes : No attributes Example: { \"name\": \"hasInterval\", \"super\": [ \"hasValue\" ], \"object\": \"IntervalValue\", \"labels\": {\"en\": \"Time interval\"}, \"gui_element\": \"Interval\" }","title":"IntervalValue"},{"location":"dsp-tools-create/#listvalue","text":"\"object\": \"ListValue\" Represents a node of a (possibly hierarchical) list gui-elements / gui_attributes : - Radio : A GUI element for ListValue . A set of radio buttons. This works only with flat lists! gui_attributes : - hlist=<list-name> (mandatory): The reference of a list root node - List : A GUI element for ListValue . A list of values to select one from. gui_attributes : - hlist=<list-name> (mandatory): The reference of a list root node - Pulldown : A GUI element for ListValue . Pulldown for list values. Works also for hierarchical lists. gui_attributes : - hlist=<list-name> (mandatory): The reference of a list root node Example: { \"name\": \"hasListItem\", \"super\": [ \"hasValue\" ], \"object\": \"ListValue\", \"labels\": {\"en\": \"List element\"}, \"gui_element\": \"List\", \"gui_attributes\": { \"hlist\": \"treelistroot\" } }","title":"ListValue"},{"location":"dsp-tools-create/#linkvalue","text":"\"object\": \":<resource-name>\" LinkValues do not follow the pattern of the previous data types, because they do not connect to a final value but to another resource which has to be defined. Thus, the \"object\" denomiates the resource class the link will point to. If the resource is defined in the same ontology, the name has to be prepended by a \":\", if the resource is defined in another (previously defined) ontology, the ontology name has to be prepended separated by a color \":\", e.g. \"other-onto:MyResource\". The \"super\"-element has to be \"hasLinkTo\" or at least derived from \"hasLinkTo\" (how to derive a resource or property from another one is not part of this documentation). gui-elements/gui_attributes : - Searchbox : Must be used with hasLinkTo properties. Allows to search and enter a resource that the given resource should link to. It has one gui_attribute that indicates how many properties of the found resources should be indicated. It's mandatory! gui_attributes : - numprops=integer (mandatory): While dynamically displaying the search result, the number of properties that should be displayed. Example: { \"name\": \"hasOtherThing\", \"super\": [ \"hasLinkTo\" ], \"object\": \":Thing\", \"labels\": \"Another thing\", \"gui_element\": \"Searchbox\" } Like already mentioned before: The following two fields are optional (can be omitted), with the notable exception of the \"super\" clause in case of LinkValues where the super clause is mandatory:","title":"LinkValue"},{"location":"dsp-tools-create/#super","text":"\"super\": [\"<super-property>\", \"<super-property>, ...] A property must be derived from at least one base property. The most generic base property that the DSP offers is hasValue . In addition the property may be a subproperty of properties defined in external or other ontologies. External ontologies like dcterms or foaf must be defined in the \"prefix\"-section. In this case the qualified name - including the prefix of the external or internal ontology- has to be given. The following base properties are defined by DSP: - hasValue : This is the most generic base. - hasLinkTo : This value represents a link to another resource. You have to indicate the \" object \" as a prefixed name that identifies the resource class this link points to (a \":\" prepended to the name is sufficient if the resource is defined in the current ontology). - hasColor : Defines a color value ( ColorValue ) - hasComment : Defines a \"standard\" comment - hasGeometry : Defines a geometry value (a JSON describing a polygon, circle or rectangle), see ColorValue - isPartOf : A special variant of hasLinkTo . It says that an instance of the given resource class is an integral part of another resource class. E.g. a \"page\" is part of a \"book\". - isRegionOf : A special variant of hasLinkTo . It means that the given resource class is a \"region\" of another resource class. This is typically used to describe regions of interest in images. - isAnnotationOf : A special variant of hasLinkTo . It denotes the given resource class as an annotation to another resource class. - seqnum : An integer that is used to define a sequence number in an ordered set of instances, e.g. the ordering of the pages in a bokk (independent of the page naming) To sum the Properties section up, here we have an example for a complete properties definition: \"properties\": [ { \"name\": \"schulcode\", \"object\": \"TextValue\", \"labels\": { \"de\": \"Schulcode\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 32, \"maxlength\": 128 } }, { \"name\": \"schulname\", \"object\": \"TextValue\", \"labels\": { \"de\": \"Name der Schule\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 32, \"maxlength\": 128 } } ]","title":"Super"},{"location":"dsp-tools-create/#resources","text":"\"resources\": [<resource-definition>, <resource-definition>, ...] The resource classes are the primary entities of the data model. They are the actual objects/terms inside our terminology space. A resource class is a template for the representation of a real object that is represented in the DaSCH database. A resource class defines properties (aka data fields ). For each of these properties a data type as well as the cardinality have to defined. A resource needs to have the following fields:","title":"Resources"},{"location":"dsp-tools-create/#name_2","text":"\"name\": \"<NCNAME>\" A name for the resource.","title":"Name"},{"location":"dsp-tools-create/#labels_1","text":"\"labels\": {\"<lang>\": \"<string>\", ...} The string displayed of the resource is being accessed.","title":"Labels"},{"location":"dsp-tools-create/#super_1","text":"\"super\": [\"<super-resource>\", \"<super-resource>\", ...] A resource is always derived from at least one other resource. The most generic resource class DSP offers is \"Resource\" . A resource may additionally also be derived from resources defined in external ontologies. The following parent predefined resources are provided by Knora: Resource A generic \"thing\" that represents an item from the real world StillImageRepresentation : An object that is connected to a still image TextRepresentation : An object that is connected to an (external) text (Not Yet Implemented) AudioRepresentation : An object representing audio data (Not Yet Implemented) DDDRepresentation : An object representing a 3-D representation (Not Yet Implemented) DocumentRepresentation : An object representing an opaque document (e.g. a PDF) MovingImageRepresentation : An object representing a moving image (video, film) Annotation : A predefined annotation object. It has automaticalle the following predefined properties defined: hasComment (1-n) isAnnotationOf (1) LinkObj : A resource class linking together several other, generic, resource classes. The class has the following properties: hasComment (1-n) hasLinkTo (1-n) Region : Represents a simple region. The class has the following properties: hasColor (1) isRegionOf (1) hasGeometry (1) isRegionOf (1) hasComment (0-n)","title":"Super"},{"location":"dsp-tools-create/#cardinalities","text":"\"cardinalities\": [...] Cardinalities is an array that contains the information about the connections between resources. It tells what type connections a single resource has as well as how many times the connection is established. Thus, the actual \"network\" is saved in this array cardinalities : Array of references to the properties that the resource may hold including the cardinality. A cardinality has the following properties: propname : The name of the property. If it's used in the form \":\"propname, the current ontology is referenced. If the \":\" is omitted, a DSP standard ontology is referenced, otherwise the full prefix of the ontology has to be used. gui_order : An integer number which will help the GUI to display the properties in the desired order cardinality : Indicates how often a given property may occur. The possible values are: \"1\" : Exactly once (mandatory one value and only one) \"0-1\" : The value may be omitted, but can occur only once \"1-n\" : At least one value must be present. But multiple values may be present \"0-n\" : The value may be omitted, but may also occur multiple times Example for a resource definition: \"resources\": [ { \"name\": \"Schule\", \"super\": \"Resource\", \"labels\": { \"de\": \"Schule\" }, \"cardinalities\": [ { \"propname\": \":schulcode\", \"gui_order\": 1, \"cardinality\": \"1\" }, { \"propname\": \":schulname\", \"gui_order\": 2, \"cardinality\": \"1\" }, { \"propname\": \":bildungsgang\", \"gui_order\": 3, \"cardinality\": \"1\" } ] }]","title":"Cardinalities"},{"location":"dsp-tools-create/#fully-fleshed-out-example-ontology","text":"Finally, we show a complete example of an ontology definition. { \"prefixes\": { \"foaf\": \"http://xmlns.com/foaf/0.1/\", \"dcterms\": \"http://purl.org/dc/terms/\" }, \"project\": { \"shortcode\": \"0170\", \"shortname\": \"teimp\", \"longname\": \"Test Import\", \"descriptions\": { \"en\": \"This is a project for testing the creation of ontologies and data\", \"de\": \"Dies ist ein Projekt, um die Erstellung von Ontologien und Datenimport zu testen\" }, \"keywords\": [\"test\", \"import\"], \"lists\": [{ \"name\": \"orgtpye\", \"labels\": { \"de\": \"Roganisationsart\", \"en\": \"Organization Type\" }, \"nodes\": [{ \"name\": \"business\", \"labels\": { \"en\": \"Commerce\", \"de\": \"Handel\" }, \"comments\": { \"en\": \"no comment\", \"de\": \"kein Kommentar\" }, \"nodes\": [{ \"name\": \"transport\", \"labels\": { \"en\": \"Transportation\", \"de\": \"Transport\" } }, { \"name\": \"finances\", \"labels\": { \"en\": \"Finances\", \"de\": \"Finanzen\" } } ] }, { \"name\": \"society\", \"labels\": { \"en\": \"Society\", \"de\": \"Gesellschaft\" } } ] }], \"ontologies\": [{ \"name\": \"teimp\", \"label\": \"Test import ontology\", \"properties\": [{ \"name\": \"firstname\", \"super\": [\"hasValue\", \"foaf:givenName\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Firstname\", \"de\": \"Vorname\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 24, \"maxlength\": 32 } }, { \"name\": \"lastname\", \"super\": [\"hasValue\", \"foaf:familyName\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Lastname\", \"de\": \"Nachname\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 24, \"maxlength\": 64 } }, { \"name\": \"member\", \"super\": [\"hasLinkTo\"], \"object\": \"teimp:organization\", \"labels\": { \"en\": \"member of\", \"de\": \"Mitglied von\" }, \"gui_element\": \"Searchbox\" }, { \"name\": \"name\", \"super\": [\"hasValue\"], \"object\": \"TextValue\", \"labels\": { \"en\": \"Name\", \"de\": \"Name\" }, \"gui_element\": \"SimpleText\", \"gui_attributes\": { \"size\": 64, \"maxlength\": 64 } }, { \"name\": \"orgtype\", \"super\": [\"hasValue\"], \"object\": \"ListValue\", \"labels\": { \"en\": \"Organizationtype\", \"de\": \"Organisationstyp\" }, \"comments\": { \"en\": \"Type of organization\", \"de\": \"Art der Organisation\" }, \"gui_element\": \"Pulldown\", \"gui_attributes\": { \"hlist\": \"orgtype\" } } ], \"resources\": [{ \"name\": \"person\", \"super\": \"Resource\", \"labels\": { \"en\": \"Person\", \"de\": \"Person\" }, \"comments\": { \"en\": \"Represents a human being\", \"de\": \"Repr\u00e4sentiert eine Person/Menschen\" }, \"cardinalities\": [{ \"propname\": \":firstname\", \"gui_order\": 1, \"cardinality\": \"1\" }, { \"propname\": \":lastname\", \"gui_order\": 2, \"cardinality\": \"1\" }, { \"propname\": \":member\", \"gui_order\": 3, \"cardinality\": \"0-n\" } ] }, { \"name\": \"organization\", \"super\": \"Resource\", \"labels\": { \"en\": \"Organization\", \"de\": \"Organisation\" }, \"comments\": { \"en\": \"Denotes an organizational unit\", \"de\": \"Eine Institution oder Tr\u00e4gerschaft\" }, \"cardinalities\": [{ \"propname\": \":name\", \"gui_order\": 1, \"cardinality\": \"1-n\" }, { \"propname\": \":orgtype\", \"gui_order\": 2, \"cardinality\": \"1-n\" } ] } ] }] } }","title":"Fully fleshed out example ontology"},{"location":"dsp-tools-xmlupload/","text":"Knora XML-file format for importing data The import file is a standard XML file as decribed below. Preamble The import file must start with the standard XML header: <?xml version='1.0' encoding='utf-8'?> <knora> The <knora> -element describes a set of resources that are to be imported. It is the container for an arbitrary number of resource elements and may only contain resource tags. The <knora> -eelement defines has the following options: xmlns:xsi : \"http://www.w3.org/2001/XMLSchema-instance\" [required] xsi:schemaLocation : Path to knora XML schema file for validation [optional] shortcode : Knora project shortcode, e.g. \"0801\" [required] ontology : Name of the ontology [required] Thus, the <knora> -eelment may b used as follows: <knora xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"../knora-data-schema.xsd\" shortcode=\"0806\" ontology=\"webern\"> ... </knora> The <knora> -element can only contain - <permissions> -elements - <resource> -elements The permissions are implemented for importing data using permission sets. A permission set is a named element that contains the permissions for selected resources or values. In order to give a resource a value the permission, the named permission set is referenced. <permissions> The DSP-server provides for each resource and each field of a resource access control. For a more thorough discussion of the permission and access system of the DSP platform, see DSP platform permissions The following access rights are defined by the DSP platform which apply to either the resource or field: RV : Restricted View permission : The user sees a somehow restricted view of the element. E.g. in case of a still image resource, the image is displeyed at reduced resolution or with a watermark overlay. V : View permission : The user has read access to the element M : Modifiy permission : The user may alter/modify the element, but may not delete it D : Delete permission : The user is allowed to delete the element CR : Change Right permission : The user may change the permission of the element The user does not hold directly the permissions, but may belong to an arbitrary number of groups which hold the permissions. By default, the following groups always exist, and each user belongs to at least one of them UnkownUser : The user is not known to the DSP platform (no login) KnownUser : The user is known (performed login), but is not member of the project the element belongs to ProjectMember : The user belongs to the same project as the data element retrieved ProjectAdmin : The user is project administrator in the project the data element belongs to Creator : The user is the \"owner\" of the element, that is the one that created the element SystemAdmin : System administrator In addition, more groups with arbitrary names can be created by the project admins. For referencing such a group, the projectname has to be prepended before the group name separated by a colon, e.g. knora-py-test:MlsEditors . A <permissions> -element contains the permissions given to the selected groups and is called a permission set . It contains a mandatory option id and must contain at least one <allow> -element per user group indicating the group's permission. It has the form: <permissions id=\"res-default\"> <allow group=\"UnknownUser\">RV</allow> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow> <allow group=\"ProjectAdmin\">CR</allow> <allow group=\"knora-py-test:MlsEditors\">D</allow> </permissions> Options : - id : Unique id (an xs:ID) for the permission set. It is used to reference a permission set. Subelements allowed : - <allow> : defines the permission for one group <allow> The <allow> -element is used to defined the permission for one group. It has the form: <allow group=\"ProjectAdmin\">CR</allow>> The allowed values are (see Knora-documentation for a more detailed description of the Knora permission system): \"RV\" : Restricted view: Th associated media is shown in reduced quality. \"V\" : View: The user is able to view the data readonly \"M\" : Modifiy: The user may modify of a value. The original value will be preserved using the history mchanism. \"D\" : Delete: The user is able to mark a resource of a value as deleted. \"CR\" : The user is able to change the right of a resource or value The group option is mandatory. Options : group : Defines the group for the permission. The knora systemgroups as well as project speccific groups are supported. A project specific group name has the form project-shortname:groupnam . The system groups are: \"UnknownUser\" \"KnownUser\" \"ProjectMember\" \"Creator\" \"ProjectAdmin\" \"SystemAdmin\" Subelements allowed : None Thus a complete permission section may be as follows: <permissions id=\"res-default\"> <allow group=\"UnknownUser\">RV</allow> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow> <allow group=\"ProjectAdmin\">CR</allow> </permissions> <permissions id=\"res-restricted\"> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow> <allow group=\"ProjectAdmin\">CR</allow> </permissions> <permissions id=\"prop-default\"> <allow group=\"UnknownUser\">V</allow> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow> <allow group=\"ProjectAdmin\">CR</allow> </permissions> <permissions id=\"prop-restricted\"> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow> <allow group=\"ProjectAdmin\">CR</allow> </permissions> <resource> A resource -element contains all necessary information to create a resource. It has the following options: Options : label : The label, a human readable, semantical meaningfull short name of the resource [required] restype : The resource type as defined within the ontology [required] id : A unique, arbitrary string giving a unique ID to the resource. This ID is only used during the import process for referencing this resource from other resources. During the import process, it will be replaced by the IRI used internally by Knora. [required] permissions : a reference to a permission set. These permissions will be applied to the newly created resoource. [optional] <resource label=\"EURUS015a\" restype=\"Postcard\" unique_id=\"238807\" permissions=\"res-def-perm\"> ... </resource> The <resource> -element contains for each property class a property -element which itself contains one or several value -elements. It must also contain an <image> -element if the resource is a StillImage. The property -element must have the option name present which indicates the property class from the project specific ontology where the values belong to. name -option: \"name\" : Name of the property as given in the ontology Example: <text-prop name=\"hasTranslation\"> <text encoding=\"utf8\">Dies ist eine \u00dcbersetzung</text> </text-prop> The <resource> -element may contain the following tags describing properties (data fields): <image> : In case of the StillImageResource contains the path to the image file. <text-prop> : Contains text values <color-prop> : Contains color values <date-prop> : Contains date values <decimal-prop> : Contains decimal values <geometry-prop> : Contains a JSON geometry definition for a region <geoname-prop> : Contains a geoname.org location code <list-prop> : Contains list elements labels <iconclass-prop> : Contains iconclass.org codes <integer-prop> : Contains integer values <interval-prop> : Contains interval values <period-prop> : Contains time period values <resptr-prop> : Contains links othr resources <time-prop> : Contains time values <uri-prop> : Contains URI values <boolean-prop> : Contains boolean values <image> -element The <image> -element contains the path to an image file. It must only be used if the resource is a StillImageRepresentation and must be the first element! Options : - none Note : There is only one <image> -element allowed per StillImageRepresentation! Example: <image>postcards.dir/images/EURUS015a.jpg</image> <sound> -element The <sound> -element contains the path to an sound file. It must only be used if the resource is a AudioRepresentation and must be the first element! Options : - none Note : There is only one <sound> -element allowed per AudioRepresentation! Example: <sound>concerts.dir/files/SOTW.wav</sound> <movie> -element The <movie> -element contains the path to an movie file. It must only be used if the resource is a MovingImageRepresentation and must be the first element! Options : - none Note : There is only one <movie> -element allowed per MovingImageRepresentation! Example: <movie>movies.dir/files/the_general.mp4</movie> <document> -element The <document> -element contains the path to an document file. It must only be used if the resource is a DocumentRepresentation and must be the first element! Options : - none Note : There is only one <document> -element allowed per DocumentRepresentation! Example: <document>facsimiles/files/we_the_people.pdf</document> <text-prop> -element The text property element is used to list text values. The <text-prop> -element must contain at least one <text> -element. There are several variants of text tags: Options : - \"name\" : Name of the property as given in the ontology (required) <text> -element The <text> -element has the following options: - encoding : either \"utf8\" or \"hex64\" [required] - utf8 : The element describes a simple text without markup. The text is a simple utf-8 string - xml : The element describes a complex text containing markup. It must be follow the XML-format as defined by the DSP standard mapping . - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Simple Text A complete example for a simple text: <text-prop name=\"hasComment\"> <text encoding=\"utf8\">Probe bei \"Wimberger\". Lokal in Wien?</text> </text-prop> Text with Markup Knora-xml-import assumes that for markup-text (standoff-markup) standard mapping for Knora is being used (Custom mapping to customized standoff tags is not yet implemented!) E.g. a text containing a link to another resource must have the following form: <text permissions=\"prop-default\" encoding=\"xml\" >The <strong>third</strong> object and a <a class=\"salsah-link\" href=\"IRI:obj_0003:IRI\">link</a> to.</text> Please note that the href-option within the anchor tag points to an internal resource of knora and this has to have the special format \" IRI: res-id :IRI \" where res-id is the resource id defined within the XML import file. A resource already existing in knora can be referenced by indicating its IRI directly has href -option. Within one text property, multiple simple and complex text values may be mixed. <color-prop> -element The color-prop eelement is used to define a color property. Options : - \"name\" : Name of the property as given in the ontology (required) <color> -element The color-element is used to indicate a color value. The color has to be giiven in web-notation, that is a \"#\" followed by 3 or 6 hex numerals. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. A propery with 2 color valus would be defined as follows: <color-prop name=\"hasColor\"> <color>#00ff66</color> <color>#ff00ff</color> </color-prop> <date-prop> -eleement Is used to define knora dates. Options : - \"name\" : Name of the property as given in the ontology (required) <date> -element A Knora date value. It has the following format: calendar:epoch:yyyy-mm-dd:epoch:yyyy-mm-dd calendar : either \"JULIAN\" or \"GREGORIAN\" [optional, default: GREGORIAN] epoch : either \"BCE\" or \"CE\" [optional, default CE] yyyy : year with four digits (at least one must be given) mm : month with two digits 01, 02, .., 12 dd : day eith two digits If two dates are given, the date is in between the two given limits. If the day is omitted, then the precision it month , if also the month is omited, the precision is year . Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Examples: <date>GREGORIAN:CE:2014-01-31</date> <date>GREGORIAN:CE:1930-09-02:CE:1930-09-03</date> <decimal-prop> -element Properties with decimal values. Contains one or more <dcimal> -tags. Options : - \"name\" : Name of the property as given in the ontology (required) <decimal> -element The float element contains a decimal number. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <float>3.14159</float> <geometry-prop> -element Properties which contain a geometric definition for a 2-D region (e.g. on an image). Usually thes are not created by an import and should be used with caution! Options : - \"name\" : Name of the property as given in the ontology (required) <geometry> -element A geometry is defined as a JSON object. It contains the following data: - status : \"active\" or \"deleted\" - type : \"circle\", \"rectangle\" or \"polygon\" - lineColor : WEB-Color - lineWidth : integer number (in pixels) - points : Array of coordinate objects of the form {\"x\": decimal, \"y\": decimal} - radius : Coordinate object in the form {\"x\": decimal, \"y\": decimal} Please note that all coordinates are normalized coordinates (relative to the image size) between 0.0 and 1.0 ! The following example defines a poylgon: { \"status\": \"active\", \"type\": \"polygon\", \"lineColor\": \"#ff3333\", \"lineWidth\": 2, \"points: [{\"x\": 0.17252396166134185, \"y\": 0.1597222222222222}, {\"x\": 0.8242811501597445, \"y\": 0.14583333333333334}, {\"x\": 0.8242811501597445, \"y\": 0.8310185185185185}, {\"x\": 0.1757188498402556, \"y\": 0.8240740740740741}, {\"x\": 0.1757188498402556, \"y\": 0.1597222222222222}, {\"x\": 0.16932907348242812, \"y\": 0.16435185185185186}], \"original_index\": 0 } Thus, a -element may look like: <geometry>{\"status\":\"active\",\"type\"=\"circle\",\"lineColor\"=\"#ff0000\",\"lineWidth\"=2,\"points\":[{\"x\":0.5,\"y\":0.5}],\"radius\":{\"x\":0.1,\"y\":0.0}}</geometry> Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. <geoname-prop> -element Used for values that contain a geonames.org location ID Options : - \"name\" : Name of the property as given in the ontology (required) <geoname> -element Contains a valid geonames.org ID. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example (City of Wien): <geoname>2761369</geoname> <list-prop> -element Entry into a list (list node). List nodes are identified by their name -property that was given when creating the list nodes (which must be unique within each list!). Options : - \"name\" : Name of the property as given in the ontology (required) <list> -element References a node in a (pulldown- or hierarchical-) list Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <list>H_4128</list> <iconclass-prop> -element ( NOT YET IMPLEMENTED ) Contains the short code of an iconclass entry see iconclass.org . For example the code 92E112 stands for (story of) Aurora (Eos); 'Aurora' (Ripa) - infancy, upbringing Aurora \u00b7 Ripa \u00b7 air \u00b7 ancient history \u00b7 child \u00b7 classical antiquity \u00b7 goddess \u00b7 gods \u00b7 heaven \u00b7 history \u00b7 infancy \u00b7 mythology \u00b7 sky \u00b7 upbringing \u00b7 youth Options : - \"name\" : Name of the property as given in the ontology (required) <iconclass> -element ( NOT YET IMPLEMENTED ) References an iconclass.org Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Usage: <iconclass>92E112</iconclass> <integer-prop> -element Contains integer values Options : - \"name\" : Name of the property as given in the ontology (required) <integer> -element Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Usage: <integer>4711</integer> <interval-prop> -element An interval defined a time period with a start and an end Options : - \"name\" : Name of the property as given in the ontology (required) <interval> -element The interval-tag value has the following form or two decimals separated by a \":\". Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <interval>1.5:3.12</interval> <resptr-prop> -element A link to another resource within Knora Options : - \"name\" : Name of the property as given in the ontology (required) <resptr> -element A value containing the XML-internal ID of the resource. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: If there is a resource deefined as <resource label=\"EURUS015a\" restype=\"Postcard\" unique_id=\"238807\"> \u2026 </resource it can be referenced as <resptr>238807</resptr> <time-prop> -element A time property Options : - \"name\" : Name of the property as given in the ontology (required) <time> -element This represents an exact date/time value in the form of yyyy-mm-ddThh:mm:ss.sssssssssssszzzzzz The following abbreviations describe this form: yyyy A four-digit numeral that represents the year. The value cannot begin with a negative (-) sign or a plus (+) sign. 0001 is the lexical representation of the year 1 of the Common Era (also known as 1 AD). The value cannot be 0000. mm A two-digit numeral that represents the month. dd A two-digit numeral that represents the day. _hh_A two-digit numeral (with leading zeros as required) that represents the hours. The value must be between -14 and +14, inclusive. mm A two-digit numeral that represents the minute. ss A two-digit numeral that represents the whole seconds. ssssssssssss Optional. If present, a 1-to-12 digit numeral that represents the fractional seconds. zzzzzz Is required and represents the time zone. Each part of the datetime value that is expressed as a numeric value is constrained to the maximum value within the interval that is determined by the next-higher part of the datetime value. For example, the day value can never be 32 and cannot be 29 for month 02 and year 2002 (February 2002). The timezone is defined as follows: A positive (+) or negative (-) sign that is followed by hh:mm, where the following abbreviations are used: hh A two-digit numeral (with leading zeros as required) that represents the hours. The value must be between -14 and +14, inclusive. mm two-digit numeral that represents the minutes. The value of the minutes property must be zero when the hours property is equal to 14. + Indicates that the specified time instant is in a time zone that is ahead of the UTC time by hh hours and mm minutes. - Indicates that the specified time instant is in a time zone that is behind UTC time by hh hours and mm minutes. or Z The literal Z, which represents the time in UTC (Z represents Zulu time, which is equivalent to UTC). Specifying Z for the time zone is equivalent to specifying +00:00 or -00:00. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: The following form indicates noon on 10 October 2009, Eastern Standard Time in the United States: <time>2009-10-10T12:00:00-05:00</time> <time>2019-10-23T13.45:12Z</time> <uri-prop> -element A property containing an valid URI Options : - \"name\" : Name of the property as given in the ontology (required) <uri> -element Contains a syntactically valid URI. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <uri>http://www.groove-t-gang.ch</ur> <boolean-prop >-element A property containing boolean values Options : - \"name\" : Name of the property as given in the ontology (required) <boolean> -element Must contain the string \"true\" or \"false\", or the numeral \"1\" or \"0\" Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <boolean>true</boolean> <boolean>0</boolean> Complete example <?xml version='1.0' encoding='utf-8'?> <knora xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" shortcode=\"0001\" default-ontology=\"anything\"> <!-- permissions: see https://docs.knora.org/03-apis/api-v2/reading-user-permissions/ --> <permissions id=\"res-default\"> <allow group=\"UnknownUser\">RV</allow> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow> <allow group=\"ProjectAdmin\">CR</allow> <allow group=\"anything:Thing searcher\">D</allow> </permissions> <permissions id=\"res-restricted\"> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow>> <allow group=\"ProjectAdmin\">CR</allow>> <allow group=\"anything:Thing searcher\">M</allow>> </permissions> <permissions id=\"prop-default\"> <allow group=\"UnknownUser\">V</allow> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow> <allow group=\"ProjectAdmin\">CR</allow>> <allow group=\"anything:Thing searcher\">D</allow>> </permissions> <permissions id=\"prop-restricted\"> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow> <allow group=\"ProjectAdmin\">CR</allow> <allow group=\"anything:Thing searcher\">M</allow> </permissions> <resource label=\"obj_inst1\" restype=\":BlueThing\" id=\"obj_0001\" permissions=\"res-default\"> <!-- --> <list-prop list=\"treelistroot\" name=\":hasListItem\"> <list permissions=\"prop-default\">Tree list node 02</list> </list-prop> <list-prop list=\"treelistroot\" name=\":hasOtherListItem\"> <list permissions=\"prop-default\">Tree list node 03</list> </list-prop> <text-prop name=\":hasRichtext\"> <text permissions=\"prop-default\" encoding=\"xml\" >The <strong>third</strong> object and a <a class=\"salsah-link\" href=\"IRI:obj_0003:IRI\">link</a> to.</text> </text-prop> <!-- --> <text-prop name=\":hasRichtext\"> <text permissions=\"prop-default\" encoding=\"xml\" >The <strong>third</strong> object and a <a class=\"salsah-link\" href=\"IRI:obj_0003:IRI\">link</a> to.</text> </text-prop> <!-- --> <text-prop name=\":hasText\"> <text permissions=\"prop-default\" encoding=\"utf8\">Dies ist ein einfacher Text ohne Markup</text> <text permissions=\"prop-restricted\" encoding=\"utf8\">Nochmals ein einfacher Text</text> </text-prop> <date-prop name=\":hasDate\"> <date permissions=\"prop-default\" >JULIAN:CE:1401-05-17:CE:1402-01</date> </date-prop> <integer-prop name=\":hasInteger\"> <integer permissions=\"prop-default\">4711</integer> </integer-prop> <decimal-prop name=\":hasDecimal\"> <decimal permissions=\"prop-default\" comment=\"Eulersche Zahl\">2.718281828459</decimal> </decimal-prop> <boolean-prop name=\":hasBoolean\"> <boolean permissions=\"prop-default\">true</boolean> </boolean-prop> <uri-prop name=\":hasUri\"> <uri permissions=\"prop-default\">http://dasch.swiss/gaga</uri> </uri-prop> <interval-prop name=\":hasInterval\"> <interval permissions=\"prop-default\">12.5:14.2</interval> </interval-prop> <color-prop name=\":hasColor\"> <color permissions=\"prop-default\">#00ff00</color> </color-prop> <geometry-prop name=\":hasGeometry\"> <geometry permissions=\"prop-default\"> { \"status\":\"active\", \"lineColor\":\"#ff3333\", \"lineWidth\":2, \"points\":[ {\"x\":0.08098591549295775,\"y\":0.16741071428571427}, {\"x\":0.7394366197183099,\"y\":0.7299107142857143}], \"type\":\"rectangle\", \"original_index\":0 } </geometry> </geometry-prop> <geoname-prop name=\":hasGeoname\"> <geoname permissions=\"prop-default\" comment=\"A sacred place for railroad fans\">5416656</geoname> </geoname-prop> <resptr-prop name=\":hasBlueThing\"> <resptr permissions=\"prop-default\">obj_0002</resptr> </resptr-prop> <!-- --> </resource> <resource label=\"obj_inst2\" restype=\":BlueThing\" id=\"obj_0002\" permissions=\"res-default\"> <list-prop list=\"treelistroot\" name=\":hasListItem\"> <list permissions=\"prop-default\">Tree list node 10</list> </list-prop> <list-prop list=\"treelistroot\" name=\":hasOtherListItem\"> <list permissions=\"prop-default\">Tree list node 11</list> </list-prop> <text-prop name=\":hasRichtext\"> <text permissions=\"prop-default\" encoding=\"xml\">What is this <em>bold</em> thing?</text> </text-prop> <text-prop name=\":hasText\"> <text permissions=\"prop-default\" encoding=\"utf8\">aa bbb cccc ddddd</text> </text-prop> <date-prop name=\":hasDate\"> <date permissions=\"prop-default\" >1888</date> </date-prop> <integer-prop name=\":hasInteger\"> <integer permissions=\"prop-default\">42</integer> </integer-prop> <decimal-prop name=\":hasDecimal\"> <decimal permissions=\"prop-default\" comment=\"Die Zahl PI\">3.14159</decimal> </decimal-prop> <boolean-prop name=\":hasBoolean\"> <boolean permissions=\"prop-default\">false</boolean> </boolean-prop> <uri-prop name=\":hasUri\"> <uri permissions=\"prop-default\">http://unibas.ch/gugus</uri> </uri-prop> <interval-prop name=\":hasInterval\"> <interval permissions=\"prop-default\">24:100.075</interval> </interval-prop> <color-prop name=\":hasColor\"> <color permissions=\"prop-default\">#33ff77</color> </color-prop> <geometry-prop name=\":hasGeometry\"> <geometry permissions=\"prop-default\"> { \"status\":\"active\", \"lineColor\":\"#ff3333\", \"lineWidth\":2, \"points\":[ {\"x\":0.08098591549295775,\"y\":0.16741071428571427}, {\"x\":0.7394366197183099,\"y\":0.7299107142857143}], \"type\":\"rectangle\", \"original_index\":0 } </geometry> </geometry-prop> <geoname-prop name=\":hasGeoname\"> <geoname permissions=\"prop-default\" comment=\"A sacred place for railroad fans\">5416656</geoname> </geoname-prop> <resptr-prop name=\":hasBlueThing\"> <resptr permissions=\"prop-default\">obj_0003</resptr> </resptr-prop> </resource> <resource label=\"obj_inst3\" restype=\":BlueThing\" id=\"obj_0003\" permissions=\"res-default\"> <list-prop list=\"treelistroot\" name=\":hasListItem\"> <list permissions=\"prop-default\">Tree list node 01</list> </list-prop> <list-prop list=\"treelistroot\" name=\":hasOtherListItem\"> <list permissions=\"prop-default\">Tree list node 02</list> </list-prop> <text-prop name=\":hasRichtext\"> <text permissions=\"prop-default\" encoding=\"xml\">This is <em>bold and <strong>string</strong></em> text!</text> </text-prop> <text-prop name=\":hasText\"> <text permissions=\"prop-default\" encoding=\"utf8\">aa bbb cccc ddddd</text> </text-prop> <date-prop name=\":hasDate\"> <date permissions=\"prop-default\" >1888</date> </date-prop> <integer-prop name=\":hasInteger\"> <integer permissions=\"prop-default\">42</integer> </integer-prop> <decimal-prop name=\":hasDecimal\"> <decimal permissions=\"prop-default\" comment=\"Die Zahl PI\">3.14159</decimal> </decimal-prop> <boolean-prop name=\":hasBoolean\"> <boolean permissions=\"prop-default\">false</boolean> </boolean-prop> <uri-prop name=\":hasUri\"> <uri permissions=\"prop-default\">http://unibas.ch/gugus</uri> </uri-prop> <interval-prop name=\":hasInterval\"> <interval permissions=\"prop-default\">24:100.075</interval> </interval-prop> <color-prop name=\":hasColor\"> <color permissions=\"prop-default\">#33ff77</color> </color-prop> <geometry-prop name=\":hasGeometry\"> <geometry permissions=\"prop-default\"> { \"status\":\"active\", \"lineColor\":\"#ff3333\", \"lineWidth\":2, \"points\":[ {\"x\":0.08098591549295775,\"y\":0.16741071428571427}, {\"x\":0.7394366197183099,\"y\":0.7299107142857143}], \"type\":\"rectangle\", \"original_index\":0 } </geometry> </geometry-prop> <geoname-prop name=\":hasGeoname\"> <geoname permissions=\"prop-default\" comment=\"A sacred place for railroad fans\">5416656</geoname> </geoname-prop> </resource> <resource label=\"obj_inst4\" restype=\":ThingPicture\" id=\"obj_0004\" permissions=\"res-default\"> <image>gaga.tif</image> <text-prop name=\":hasPictureTitle\"> <text permissions=\"prop-default\" encoding=\"utf8\">This is the famous Lena</text> </text-prop> </resource> </knora>","title":"Bulk data import"},{"location":"dsp-tools-xmlupload/#knora-xml-file-format-for-importing-data","text":"The import file is a standard XML file as decribed below.","title":"Knora XML-file format for importing data"},{"location":"dsp-tools-xmlupload/#preamble","text":"The import file must start with the standard XML header: <?xml version='1.0' encoding='utf-8'?>","title":"Preamble"},{"location":"dsp-tools-xmlupload/#knora","text":"The <knora> -element describes a set of resources that are to be imported. It is the container for an arbitrary number of resource elements and may only contain resource tags. The <knora> -eelement defines has the following options: xmlns:xsi : \"http://www.w3.org/2001/XMLSchema-instance\" [required] xsi:schemaLocation : Path to knora XML schema file for validation [optional] shortcode : Knora project shortcode, e.g. \"0801\" [required] ontology : Name of the ontology [required] Thus, the <knora> -eelment may b used as follows: <knora xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"../knora-data-schema.xsd\" shortcode=\"0806\" ontology=\"webern\"> ... </knora> The <knora> -element can only contain - <permissions> -elements - <resource> -elements The permissions are implemented for importing data using permission sets. A permission set is a named element that contains the permissions for selected resources or values. In order to give a resource a value the permission, the named permission set is referenced.","title":"&lt;knora&gt;"},{"location":"dsp-tools-xmlupload/#permissions","text":"The DSP-server provides for each resource and each field of a resource access control. For a more thorough discussion of the permission and access system of the DSP platform, see DSP platform permissions The following access rights are defined by the DSP platform which apply to either the resource or field: RV : Restricted View permission : The user sees a somehow restricted view of the element. E.g. in case of a still image resource, the image is displeyed at reduced resolution or with a watermark overlay. V : View permission : The user has read access to the element M : Modifiy permission : The user may alter/modify the element, but may not delete it D : Delete permission : The user is allowed to delete the element CR : Change Right permission : The user may change the permission of the element The user does not hold directly the permissions, but may belong to an arbitrary number of groups which hold the permissions. By default, the following groups always exist, and each user belongs to at least one of them UnkownUser : The user is not known to the DSP platform (no login) KnownUser : The user is known (performed login), but is not member of the project the element belongs to ProjectMember : The user belongs to the same project as the data element retrieved ProjectAdmin : The user is project administrator in the project the data element belongs to Creator : The user is the \"owner\" of the element, that is the one that created the element SystemAdmin : System administrator In addition, more groups with arbitrary names can be created by the project admins. For referencing such a group, the projectname has to be prepended before the group name separated by a colon, e.g. knora-py-test:MlsEditors . A <permissions> -element contains the permissions given to the selected groups and is called a permission set . It contains a mandatory option id and must contain at least one <allow> -element per user group indicating the group's permission. It has the form: <permissions id=\"res-default\"> <allow group=\"UnknownUser\">RV</allow> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow> <allow group=\"ProjectAdmin\">CR</allow> <allow group=\"knora-py-test:MlsEditors\">D</allow> </permissions> Options : - id : Unique id (an xs:ID) for the permission set. It is used to reference a permission set. Subelements allowed : - <allow> : defines the permission for one group","title":"&lt;permissions&gt;"},{"location":"dsp-tools-xmlupload/#allow","text":"The <allow> -element is used to defined the permission for one group. It has the form: <allow group=\"ProjectAdmin\">CR</allow>> The allowed values are (see Knora-documentation for a more detailed description of the Knora permission system): \"RV\" : Restricted view: Th associated media is shown in reduced quality. \"V\" : View: The user is able to view the data readonly \"M\" : Modifiy: The user may modify of a value. The original value will be preserved using the history mchanism. \"D\" : Delete: The user is able to mark a resource of a value as deleted. \"CR\" : The user is able to change the right of a resource or value The group option is mandatory. Options : group : Defines the group for the permission. The knora systemgroups as well as project speccific groups are supported. A project specific group name has the form project-shortname:groupnam . The system groups are: \"UnknownUser\" \"KnownUser\" \"ProjectMember\" \"Creator\" \"ProjectAdmin\" \"SystemAdmin\" Subelements allowed : None Thus a complete permission section may be as follows: <permissions id=\"res-default\"> <allow group=\"UnknownUser\">RV</allow> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow> <allow group=\"ProjectAdmin\">CR</allow> </permissions> <permissions id=\"res-restricted\"> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow> <allow group=\"ProjectAdmin\">CR</allow> </permissions> <permissions id=\"prop-default\"> <allow group=\"UnknownUser\">V</allow> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow> <allow group=\"ProjectAdmin\">CR</allow> </permissions> <permissions id=\"prop-restricted\"> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow> <allow group=\"ProjectAdmin\">CR</allow> </permissions>","title":"&lt;allow&gt;"},{"location":"dsp-tools-xmlupload/#resource","text":"A resource -element contains all necessary information to create a resource. It has the following options: Options : label : The label, a human readable, semantical meaningfull short name of the resource [required] restype : The resource type as defined within the ontology [required] id : A unique, arbitrary string giving a unique ID to the resource. This ID is only used during the import process for referencing this resource from other resources. During the import process, it will be replaced by the IRI used internally by Knora. [required] permissions : a reference to a permission set. These permissions will be applied to the newly created resoource. [optional] <resource label=\"EURUS015a\" restype=\"Postcard\" unique_id=\"238807\" permissions=\"res-def-perm\"> ... </resource> The <resource> -element contains for each property class a property -element which itself contains one or several value -elements. It must also contain an <image> -element if the resource is a StillImage. The property -element must have the option name present which indicates the property class from the project specific ontology where the values belong to. name -option: \"name\" : Name of the property as given in the ontology Example: <text-prop name=\"hasTranslation\"> <text encoding=\"utf8\">Dies ist eine \u00dcbersetzung</text> </text-prop> The <resource> -element may contain the following tags describing properties (data fields): <image> : In case of the StillImageResource contains the path to the image file. <text-prop> : Contains text values <color-prop> : Contains color values <date-prop> : Contains date values <decimal-prop> : Contains decimal values <geometry-prop> : Contains a JSON geometry definition for a region <geoname-prop> : Contains a geoname.org location code <list-prop> : Contains list elements labels <iconclass-prop> : Contains iconclass.org codes <integer-prop> : Contains integer values <interval-prop> : Contains interval values <period-prop> : Contains time period values <resptr-prop> : Contains links othr resources <time-prop> : Contains time values <uri-prop> : Contains URI values <boolean-prop> : Contains boolean values","title":"&lt;resource&gt;"},{"location":"dsp-tools-xmlupload/#image-element","text":"The <image> -element contains the path to an image file. It must only be used if the resource is a StillImageRepresentation and must be the first element! Options : - none Note : There is only one <image> -element allowed per StillImageRepresentation! Example: <image>postcards.dir/images/EURUS015a.jpg</image>","title":"&lt;image&gt;-element"},{"location":"dsp-tools-xmlupload/#sound-element","text":"The <sound> -element contains the path to an sound file. It must only be used if the resource is a AudioRepresentation and must be the first element! Options : - none Note : There is only one <sound> -element allowed per AudioRepresentation! Example: <sound>concerts.dir/files/SOTW.wav</sound>","title":"&lt;sound&gt;-element"},{"location":"dsp-tools-xmlupload/#movie-element","text":"The <movie> -element contains the path to an movie file. It must only be used if the resource is a MovingImageRepresentation and must be the first element! Options : - none Note : There is only one <movie> -element allowed per MovingImageRepresentation! Example: <movie>movies.dir/files/the_general.mp4</movie>","title":"&lt;movie&gt;-element"},{"location":"dsp-tools-xmlupload/#document-element","text":"The <document> -element contains the path to an document file. It must only be used if the resource is a DocumentRepresentation and must be the first element! Options : - none Note : There is only one <document> -element allowed per DocumentRepresentation! Example: <document>facsimiles/files/we_the_people.pdf</document>","title":"&lt;document&gt;-element"},{"location":"dsp-tools-xmlupload/#text-prop-element","text":"The text property element is used to list text values. The <text-prop> -element must contain at least one <text> -element. There are several variants of text tags: Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;text-prop&gt;-element"},{"location":"dsp-tools-xmlupload/#text-element","text":"The <text> -element has the following options: - encoding : either \"utf8\" or \"hex64\" [required] - utf8 : The element describes a simple text without markup. The text is a simple utf-8 string - xml : The element describes a complex text containing markup. It must be follow the XML-format as defined by the DSP standard mapping . - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value.","title":"&lt;text&gt;-element"},{"location":"dsp-tools-xmlupload/#simple-text","text":"A complete example for a simple text: <text-prop name=\"hasComment\"> <text encoding=\"utf8\">Probe bei \"Wimberger\". Lokal in Wien?</text> </text-prop>","title":"Simple Text"},{"location":"dsp-tools-xmlupload/#text-with-markup","text":"Knora-xml-import assumes that for markup-text (standoff-markup) standard mapping for Knora is being used (Custom mapping to customized standoff tags is not yet implemented!) E.g. a text containing a link to another resource must have the following form: <text permissions=\"prop-default\" encoding=\"xml\" >The <strong>third</strong> object and a <a class=\"salsah-link\" href=\"IRI:obj_0003:IRI\">link</a> to.</text> Please note that the href-option within the anchor tag points to an internal resource of knora and this has to have the special format \" IRI: res-id :IRI \" where res-id is the resource id defined within the XML import file. A resource already existing in knora can be referenced by indicating its IRI directly has href -option. Within one text property, multiple simple and complex text values may be mixed.","title":"Text with Markup"},{"location":"dsp-tools-xmlupload/#color-prop-element","text":"The color-prop eelement is used to define a color property. Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;color-prop&gt;-element"},{"location":"dsp-tools-xmlupload/#color-element","text":"The color-element is used to indicate a color value. The color has to be giiven in web-notation, that is a \"#\" followed by 3 or 6 hex numerals. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. A propery with 2 color valus would be defined as follows: <color-prop name=\"hasColor\"> <color>#00ff66</color> <color>#ff00ff</color> </color-prop>","title":"&lt;color&gt;-element"},{"location":"dsp-tools-xmlupload/#date-prop-eleement","text":"Is used to define knora dates. Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;date-prop&gt;-eleement"},{"location":"dsp-tools-xmlupload/#date-element","text":"A Knora date value. It has the following format: calendar:epoch:yyyy-mm-dd:epoch:yyyy-mm-dd calendar : either \"JULIAN\" or \"GREGORIAN\" [optional, default: GREGORIAN] epoch : either \"BCE\" or \"CE\" [optional, default CE] yyyy : year with four digits (at least one must be given) mm : month with two digits 01, 02, .., 12 dd : day eith two digits If two dates are given, the date is in between the two given limits. If the day is omitted, then the precision it month , if also the month is omited, the precision is year . Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Examples: <date>GREGORIAN:CE:2014-01-31</date> <date>GREGORIAN:CE:1930-09-02:CE:1930-09-03</date>","title":"&lt;date&gt;-element"},{"location":"dsp-tools-xmlupload/#decimal-prop-element","text":"Properties with decimal values. Contains one or more <dcimal> -tags. Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;decimal-prop&gt;-element"},{"location":"dsp-tools-xmlupload/#decimal-element","text":"The float element contains a decimal number. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <float>3.14159</float>","title":"&lt;decimal&gt;-element"},{"location":"dsp-tools-xmlupload/#geometry-prop-element","text":"Properties which contain a geometric definition for a 2-D region (e.g. on an image). Usually thes are not created by an import and should be used with caution! Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;geometry-prop&gt;-element"},{"location":"dsp-tools-xmlupload/#geometry-element","text":"A geometry is defined as a JSON object. It contains the following data: - status : \"active\" or \"deleted\" - type : \"circle\", \"rectangle\" or \"polygon\" - lineColor : WEB-Color - lineWidth : integer number (in pixels) - points : Array of coordinate objects of the form {\"x\": decimal, \"y\": decimal} - radius : Coordinate object in the form {\"x\": decimal, \"y\": decimal} Please note that all coordinates are normalized coordinates (relative to the image size) between 0.0 and 1.0 ! The following example defines a poylgon: { \"status\": \"active\", \"type\": \"polygon\", \"lineColor\": \"#ff3333\", \"lineWidth\": 2, \"points: [{\"x\": 0.17252396166134185, \"y\": 0.1597222222222222}, {\"x\": 0.8242811501597445, \"y\": 0.14583333333333334}, {\"x\": 0.8242811501597445, \"y\": 0.8310185185185185}, {\"x\": 0.1757188498402556, \"y\": 0.8240740740740741}, {\"x\": 0.1757188498402556, \"y\": 0.1597222222222222}, {\"x\": 0.16932907348242812, \"y\": 0.16435185185185186}], \"original_index\": 0 } Thus, a -element may look like: <geometry>{\"status\":\"active\",\"type\"=\"circle\",\"lineColor\"=\"#ff0000\",\"lineWidth\"=2,\"points\":[{\"x\":0.5,\"y\":0.5}],\"radius\":{\"x\":0.1,\"y\":0.0}}</geometry> Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value.","title":"&lt;geometry&gt;-element"},{"location":"dsp-tools-xmlupload/#geoname-prop-element","text":"Used for values that contain a geonames.org location ID Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;geoname-prop&gt;-element"},{"location":"dsp-tools-xmlupload/#geoname-element","text":"Contains a valid geonames.org ID. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example (City of Wien): <geoname>2761369</geoname>","title":"&lt;geoname&gt;-element"},{"location":"dsp-tools-xmlupload/#list-prop-element","text":"Entry into a list (list node). List nodes are identified by their name -property that was given when creating the list nodes (which must be unique within each list!). Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;list-prop&gt;-element"},{"location":"dsp-tools-xmlupload/#list-element","text":"References a node in a (pulldown- or hierarchical-) list Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <list>H_4128</list>","title":"&lt;list&gt;-element"},{"location":"dsp-tools-xmlupload/#iconclass-prop-element-not-yet-implemented","text":"Contains the short code of an iconclass entry see iconclass.org . For example the code 92E112 stands for (story of) Aurora (Eos); 'Aurora' (Ripa) - infancy, upbringing Aurora \u00b7 Ripa \u00b7 air \u00b7 ancient history \u00b7 child \u00b7 classical antiquity \u00b7 goddess \u00b7 gods \u00b7 heaven \u00b7 history \u00b7 infancy \u00b7 mythology \u00b7 sky \u00b7 upbringing \u00b7 youth Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;iconclass-prop&gt;-element (NOT YET IMPLEMENTED)"},{"location":"dsp-tools-xmlupload/#iconclass-element-not-yet-implemented","text":"References an iconclass.org Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Usage: <iconclass>92E112</iconclass>","title":"&lt;iconclass&gt;-element (NOT YET IMPLEMENTED)"},{"location":"dsp-tools-xmlupload/#integer-prop-element","text":"Contains integer values Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;integer-prop&gt;-element"},{"location":"dsp-tools-xmlupload/#integer-element","text":"Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Usage: <integer>4711</integer>","title":"&lt;integer&gt;-element"},{"location":"dsp-tools-xmlupload/#interval-prop-element","text":"An interval defined a time period with a start and an end Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;interval-prop&gt;-element"},{"location":"dsp-tools-xmlupload/#interval-element","text":"The interval-tag value has the following form or two decimals separated by a \":\". Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <interval>1.5:3.12</interval>","title":"&lt;interval&gt;-element"},{"location":"dsp-tools-xmlupload/#resptr-prop-element","text":"A link to another resource within Knora Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;resptr-prop&gt;-element"},{"location":"dsp-tools-xmlupload/#resptr-element","text":"A value containing the XML-internal ID of the resource. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: If there is a resource deefined as <resource label=\"EURUS015a\" restype=\"Postcard\" unique_id=\"238807\"> \u2026 </resource it can be referenced as <resptr>238807</resptr>","title":"&lt;resptr&gt;-element"},{"location":"dsp-tools-xmlupload/#time-prop-element","text":"A time property Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;time-prop&gt;-element"},{"location":"dsp-tools-xmlupload/#time-element","text":"This represents an exact date/time value in the form of yyyy-mm-ddThh:mm:ss.sssssssssssszzzzzz The following abbreviations describe this form: yyyy A four-digit numeral that represents the year. The value cannot begin with a negative (-) sign or a plus (+) sign. 0001 is the lexical representation of the year 1 of the Common Era (also known as 1 AD). The value cannot be 0000. mm A two-digit numeral that represents the month. dd A two-digit numeral that represents the day. _hh_A two-digit numeral (with leading zeros as required) that represents the hours. The value must be between -14 and +14, inclusive. mm A two-digit numeral that represents the minute. ss A two-digit numeral that represents the whole seconds. ssssssssssss Optional. If present, a 1-to-12 digit numeral that represents the fractional seconds. zzzzzz Is required and represents the time zone. Each part of the datetime value that is expressed as a numeric value is constrained to the maximum value within the interval that is determined by the next-higher part of the datetime value. For example, the day value can never be 32 and cannot be 29 for month 02 and year 2002 (February 2002). The timezone is defined as follows: A positive (+) or negative (-) sign that is followed by hh:mm, where the following abbreviations are used: hh A two-digit numeral (with leading zeros as required) that represents the hours. The value must be between -14 and +14, inclusive. mm two-digit numeral that represents the minutes. The value of the minutes property must be zero when the hours property is equal to 14. + Indicates that the specified time instant is in a time zone that is ahead of the UTC time by hh hours and mm minutes. - Indicates that the specified time instant is in a time zone that is behind UTC time by hh hours and mm minutes. or Z The literal Z, which represents the time in UTC (Z represents Zulu time, which is equivalent to UTC). Specifying Z for the time zone is equivalent to specifying +00:00 or -00:00. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: The following form indicates noon on 10 October 2009, Eastern Standard Time in the United States: <time>2009-10-10T12:00:00-05:00</time> <time>2019-10-23T13.45:12Z</time>","title":"&lt;time&gt;-element"},{"location":"dsp-tools-xmlupload/#uri-prop-element","text":"A property containing an valid URI Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;uri-prop&gt;-element"},{"location":"dsp-tools-xmlupload/#uri-element","text":"Contains a syntactically valid URI. Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <uri>http://www.groove-t-gang.ch</ur>","title":"&lt;uri&gt;-element"},{"location":"dsp-tools-xmlupload/#boolean-prop-element","text":"A property containing boolean values Options : - \"name\" : Name of the property as given in the ontology (required)","title":"&lt;boolean-prop&gt;-element"},{"location":"dsp-tools-xmlupload/#boolean-element","text":"Must contain the string \"true\" or \"false\", or the numeral \"1\" or \"0\" Options : - permissions : ID or a permission set. Optional, but if omitted very restricted default permissions apply! - comment : A comment to this specific value. Example: <boolean>true</boolean> <boolean>0</boolean>","title":"&lt;boolean&gt;-element"},{"location":"dsp-tools-xmlupload/#complete-example","text":"<?xml version='1.0' encoding='utf-8'?> <knora xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" shortcode=\"0001\" default-ontology=\"anything\"> <!-- permissions: see https://docs.knora.org/03-apis/api-v2/reading-user-permissions/ --> <permissions id=\"res-default\"> <allow group=\"UnknownUser\">RV</allow> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow> <allow group=\"ProjectAdmin\">CR</allow> <allow group=\"anything:Thing searcher\">D</allow> </permissions> <permissions id=\"res-restricted\"> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow>> <allow group=\"ProjectAdmin\">CR</allow>> <allow group=\"anything:Thing searcher\">M</allow>> </permissions> <permissions id=\"prop-default\"> <allow group=\"UnknownUser\">V</allow> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow> <allow group=\"ProjectAdmin\">CR</allow>> <allow group=\"anything:Thing searcher\">D</allow>> </permissions> <permissions id=\"prop-restricted\"> <allow group=\"KnownUser\">V</allow> <allow group=\"Creator\">CR</allow> <allow group=\"ProjectAdmin\">CR</allow> <allow group=\"anything:Thing searcher\">M</allow> </permissions> <resource label=\"obj_inst1\" restype=\":BlueThing\" id=\"obj_0001\" permissions=\"res-default\"> <!-- --> <list-prop list=\"treelistroot\" name=\":hasListItem\"> <list permissions=\"prop-default\">Tree list node 02</list> </list-prop> <list-prop list=\"treelistroot\" name=\":hasOtherListItem\"> <list permissions=\"prop-default\">Tree list node 03</list> </list-prop> <text-prop name=\":hasRichtext\"> <text permissions=\"prop-default\" encoding=\"xml\" >The <strong>third</strong> object and a <a class=\"salsah-link\" href=\"IRI:obj_0003:IRI\">link</a> to.</text> </text-prop> <!-- --> <text-prop name=\":hasRichtext\"> <text permissions=\"prop-default\" encoding=\"xml\" >The <strong>third</strong> object and a <a class=\"salsah-link\" href=\"IRI:obj_0003:IRI\">link</a> to.</text> </text-prop> <!-- --> <text-prop name=\":hasText\"> <text permissions=\"prop-default\" encoding=\"utf8\">Dies ist ein einfacher Text ohne Markup</text> <text permissions=\"prop-restricted\" encoding=\"utf8\">Nochmals ein einfacher Text</text> </text-prop> <date-prop name=\":hasDate\"> <date permissions=\"prop-default\" >JULIAN:CE:1401-05-17:CE:1402-01</date> </date-prop> <integer-prop name=\":hasInteger\"> <integer permissions=\"prop-default\">4711</integer> </integer-prop> <decimal-prop name=\":hasDecimal\"> <decimal permissions=\"prop-default\" comment=\"Eulersche Zahl\">2.718281828459</decimal> </decimal-prop> <boolean-prop name=\":hasBoolean\"> <boolean permissions=\"prop-default\">true</boolean> </boolean-prop> <uri-prop name=\":hasUri\"> <uri permissions=\"prop-default\">http://dasch.swiss/gaga</uri> </uri-prop> <interval-prop name=\":hasInterval\"> <interval permissions=\"prop-default\">12.5:14.2</interval> </interval-prop> <color-prop name=\":hasColor\"> <color permissions=\"prop-default\">#00ff00</color> </color-prop> <geometry-prop name=\":hasGeometry\"> <geometry permissions=\"prop-default\"> { \"status\":\"active\", \"lineColor\":\"#ff3333\", \"lineWidth\":2, \"points\":[ {\"x\":0.08098591549295775,\"y\":0.16741071428571427}, {\"x\":0.7394366197183099,\"y\":0.7299107142857143}], \"type\":\"rectangle\", \"original_index\":0 } </geometry> </geometry-prop> <geoname-prop name=\":hasGeoname\"> <geoname permissions=\"prop-default\" comment=\"A sacred place for railroad fans\">5416656</geoname> </geoname-prop> <resptr-prop name=\":hasBlueThing\"> <resptr permissions=\"prop-default\">obj_0002</resptr> </resptr-prop> <!-- --> </resource> <resource label=\"obj_inst2\" restype=\":BlueThing\" id=\"obj_0002\" permissions=\"res-default\"> <list-prop list=\"treelistroot\" name=\":hasListItem\"> <list permissions=\"prop-default\">Tree list node 10</list> </list-prop> <list-prop list=\"treelistroot\" name=\":hasOtherListItem\"> <list permissions=\"prop-default\">Tree list node 11</list> </list-prop> <text-prop name=\":hasRichtext\"> <text permissions=\"prop-default\" encoding=\"xml\">What is this <em>bold</em> thing?</text> </text-prop> <text-prop name=\":hasText\"> <text permissions=\"prop-default\" encoding=\"utf8\">aa bbb cccc ddddd</text> </text-prop> <date-prop name=\":hasDate\"> <date permissions=\"prop-default\" >1888</date> </date-prop> <integer-prop name=\":hasInteger\"> <integer permissions=\"prop-default\">42</integer> </integer-prop> <decimal-prop name=\":hasDecimal\"> <decimal permissions=\"prop-default\" comment=\"Die Zahl PI\">3.14159</decimal> </decimal-prop> <boolean-prop name=\":hasBoolean\"> <boolean permissions=\"prop-default\">false</boolean> </boolean-prop> <uri-prop name=\":hasUri\"> <uri permissions=\"prop-default\">http://unibas.ch/gugus</uri> </uri-prop> <interval-prop name=\":hasInterval\"> <interval permissions=\"prop-default\">24:100.075</interval> </interval-prop> <color-prop name=\":hasColor\"> <color permissions=\"prop-default\">#33ff77</color> </color-prop> <geometry-prop name=\":hasGeometry\"> <geometry permissions=\"prop-default\"> { \"status\":\"active\", \"lineColor\":\"#ff3333\", \"lineWidth\":2, \"points\":[ {\"x\":0.08098591549295775,\"y\":0.16741071428571427}, {\"x\":0.7394366197183099,\"y\":0.7299107142857143}], \"type\":\"rectangle\", \"original_index\":0 } </geometry> </geometry-prop> <geoname-prop name=\":hasGeoname\"> <geoname permissions=\"prop-default\" comment=\"A sacred place for railroad fans\">5416656</geoname> </geoname-prop> <resptr-prop name=\":hasBlueThing\"> <resptr permissions=\"prop-default\">obj_0003</resptr> </resptr-prop> </resource> <resource label=\"obj_inst3\" restype=\":BlueThing\" id=\"obj_0003\" permissions=\"res-default\"> <list-prop list=\"treelistroot\" name=\":hasListItem\"> <list permissions=\"prop-default\">Tree list node 01</list> </list-prop> <list-prop list=\"treelistroot\" name=\":hasOtherListItem\"> <list permissions=\"prop-default\">Tree list node 02</list> </list-prop> <text-prop name=\":hasRichtext\"> <text permissions=\"prop-default\" encoding=\"xml\">This is <em>bold and <strong>string</strong></em> text!</text> </text-prop> <text-prop name=\":hasText\"> <text permissions=\"prop-default\" encoding=\"utf8\">aa bbb cccc ddddd</text> </text-prop> <date-prop name=\":hasDate\"> <date permissions=\"prop-default\" >1888</date> </date-prop> <integer-prop name=\":hasInteger\"> <integer permissions=\"prop-default\">42</integer> </integer-prop> <decimal-prop name=\":hasDecimal\"> <decimal permissions=\"prop-default\" comment=\"Die Zahl PI\">3.14159</decimal> </decimal-prop> <boolean-prop name=\":hasBoolean\"> <boolean permissions=\"prop-default\">false</boolean> </boolean-prop> <uri-prop name=\":hasUri\"> <uri permissions=\"prop-default\">http://unibas.ch/gugus</uri> </uri-prop> <interval-prop name=\":hasInterval\"> <interval permissions=\"prop-default\">24:100.075</interval> </interval-prop> <color-prop name=\":hasColor\"> <color permissions=\"prop-default\">#33ff77</color> </color-prop> <geometry-prop name=\":hasGeometry\"> <geometry permissions=\"prop-default\"> { \"status\":\"active\", \"lineColor\":\"#ff3333\", \"lineWidth\":2, \"points\":[ {\"x\":0.08098591549295775,\"y\":0.16741071428571427}, {\"x\":0.7394366197183099,\"y\":0.7299107142857143}], \"type\":\"rectangle\", \"original_index\":0 } </geometry> </geometry-prop> <geoname-prop name=\":hasGeoname\"> <geoname permissions=\"prop-default\" comment=\"A sacred place for railroad fans\">5416656</geoname> </geoname-prop> </resource> <resource label=\"obj_inst4\" restype=\":ThingPicture\" id=\"obj_0004\" permissions=\"res-default\"> <image>gaga.tif</image> <text-prop name=\":hasPictureTitle\"> <text permissions=\"prop-default\" encoding=\"utf8\">This is the famous Lena</text> </text-prop> </resource> </knora>","title":"Complete example"},{"location":"dsp-tools/","text":"dsp-tools In order to work with a DaSCH Service Platform server (DSP-server), the user has to create a data models (aka ontologies ) of her/his data. This data model is defined in a special JSON-file which then can be transmitted to the DSP-server. If the DSP-server is aware of the data model, conforming data can be uploaded to the server. Often, data is initially added in large quantities. Such bulk data imports can also be performed using the dsp-tools. For this purpose, the data has first to be converted in a special XML-file that can be read by dsp-tools. The dsp-tools program will read this file and upload all data to the DSP-server. Thus, the command dsp-tools can be used to upload a data model (ontology) from a JSON file to a DaSCH Service Platform (DSP) server, to dump a data model from a DSP server to a JSON file, or to upload data to a DSP server from a XML file dsp-tools create creates an ontology. Furthermore, the script reads a JSON file containing the data model (ontology) definition, connects to the DSP server and creates the data model. dsp-tools get reads an ontology from a server and creates a JSON file that can be used again by dsp-tools create to implement the data model on another server dsp-tools xmlupload to upload data from a XML file (bulk data import) Usage Create an ontology on a server $ dsp-tools create [options] data_model_definition.json The above command line supports the following options: \"-s server\" | \"--server server\" : URL of the DSP server [default: localhost:3333]. \"-u username\" | \"--user username\" : Username to log into DSP [default: root@example.com]. \"-p password\" | \"--password password\" : Password for login to the DSP server [default: test]. \"-V\" | \"--validate\" : If this flag is set, only the validation of the JSON runs. \"-l\" | \"--lists\" : This only creates the lists using a simplified schema . Please note that in this case the project must exist. \"-v\" | \"--verbose\" : Print out some information about progress This command is used to read a JSON-based definition of an ontology and create it on the given DSP-server. So for example you can have the command: $ dsp-tools create -s https://api.dsl.server.org data_model_definition.json which would load the ontology defined in data_model_definition.json onto the server given by the -s -options. Get an ontology from a server $ dsp-tools get [options] output-file The above command line supports the following options: \"-s server\" | \"--server server\" : URL of the Knora server [default: localhost:3333]. \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com]. \"-p password\" | \"--password password\" : Password for login to the Knora server [default: test]. \"-P project\" | \"--project shortcode|shortname|iri\" : Shortcode, shortname or iri of project \"-v\" | \"--verbose\" : Print out some information about progress Upload data to a DSP server $ dsp-tools xmlupload [options] xml-data-file This command line uploads all the data defined in the XML file. It supports the following options: \"-s server\" | \"--server server\" : URL of the Knora server [default: localhost:3333]. \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com]. \"-p password\" | \"--password password\" : Password for login to the Knora server [default: test]. parser_upload.add_argument(\"-i\", \"--imgdir\", type=str, default=\".\", help=\"Path to folder containing the images\") parser_upload.add_argument(\"-S\", \"--sipi\", type=str, default=\"http://0.0.0.0:1024\", help=\"URL of SIPI server\")","title":"dsp-tools"},{"location":"dsp-tools/#dsp-tools","text":"In order to work with a DaSCH Service Platform server (DSP-server), the user has to create a data models (aka ontologies ) of her/his data. This data model is defined in a special JSON-file which then can be transmitted to the DSP-server. If the DSP-server is aware of the data model, conforming data can be uploaded to the server. Often, data is initially added in large quantities. Such bulk data imports can also be performed using the dsp-tools. For this purpose, the data has first to be converted in a special XML-file that can be read by dsp-tools. The dsp-tools program will read this file and upload all data to the DSP-server. Thus, the command dsp-tools can be used to upload a data model (ontology) from a JSON file to a DaSCH Service Platform (DSP) server, to dump a data model from a DSP server to a JSON file, or to upload data to a DSP server from a XML file dsp-tools create creates an ontology. Furthermore, the script reads a JSON file containing the data model (ontology) definition, connects to the DSP server and creates the data model. dsp-tools get reads an ontology from a server and creates a JSON file that can be used again by dsp-tools create to implement the data model on another server dsp-tools xmlupload to upload data from a XML file (bulk data import)","title":"dsp-tools"},{"location":"dsp-tools/#usage","text":"","title":"Usage"},{"location":"dsp-tools/#create-an-ontology-on-a-server","text":"$ dsp-tools create [options] data_model_definition.json The above command line supports the following options: \"-s server\" | \"--server server\" : URL of the DSP server [default: localhost:3333]. \"-u username\" | \"--user username\" : Username to log into DSP [default: root@example.com]. \"-p password\" | \"--password password\" : Password for login to the DSP server [default: test]. \"-V\" | \"--validate\" : If this flag is set, only the validation of the JSON runs. \"-l\" | \"--lists\" : This only creates the lists using a simplified schema . Please note that in this case the project must exist. \"-v\" | \"--verbose\" : Print out some information about progress This command is used to read a JSON-based definition of an ontology and create it on the given DSP-server. So for example you can have the command: $ dsp-tools create -s https://api.dsl.server.org data_model_definition.json which would load the ontology defined in data_model_definition.json onto the server given by the -s -options.","title":"Create an ontology on a server"},{"location":"dsp-tools/#get-an-ontology-from-a-server","text":"$ dsp-tools get [options] output-file The above command line supports the following options: \"-s server\" | \"--server server\" : URL of the Knora server [default: localhost:3333]. \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com]. \"-p password\" | \"--password password\" : Password for login to the Knora server [default: test]. \"-P project\" | \"--project shortcode|shortname|iri\" : Shortcode, shortname or iri of project \"-v\" | \"--verbose\" : Print out some information about progress","title":"Get an ontology from a server"},{"location":"dsp-tools/#upload-data-to-a-dsp-server","text":"$ dsp-tools xmlupload [options] xml-data-file This command line uploads all the data defined in the XML file. It supports the following options: \"-s server\" | \"--server server\" : URL of the Knora server [default: localhost:3333]. \"-u username\" | \"--user username\" : Username to log into Knora [default: root@example.com]. \"-p password\" | \"--password password\" : Password for login to the Knora server [default: test]. parser_upload.add_argument(\"-i\", \"--imgdir\", type=str, default=\".\", help=\"Path to folder containing the images\") parser_upload.add_argument(\"-S\", \"--sipi\", type=str, default=\"http://0.0.0.0:1024\", help=\"URL of SIPI server\")","title":"Upload data to a DSP server"}]}